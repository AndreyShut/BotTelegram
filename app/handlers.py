from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup, default_state, any_state
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging
import app.keyboards as kb
from app.db_manager import db,pm
from dotenv import load_dotenv
import os
from typing import Optional, Tuple, List
from datetime import datetime

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)
MAX_LOGIN_ATTEMPTS = 3

class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    authorized = State()
    admin_mode = State()
    user_mode = State()
    add_news_title = State()
    add_news_description = State()
    add_news_date = State()
    add_news_place = State()
    add_news_groups = State()
    delete_news = State()
    publish_news = State()
    unbind_user_select = State()
    unbind_all_confirm = State()
    add_student = State()
    edit_student = State()
    delete_student = State()

class StudentRegisterState(StatesGroup):
    waiting_login = State()
    waiting_password = State()
    waiting_group = State()
    waiting_description = State()
add_states = StudentRegisterState

class AddTestStates(StatesGroup):
    waiting_group = State()
    waiting_subject = State()
    waiting_teacher = State()
    waiting_link = State()
    waiting_date = State()
    waiting_test_delete = State()      
    confirm_test_delete = State() 
add_test = AddTestStates

class EditStudentFSM(StatesGroup):
    waiting_id = State()
    main_menu = State()
    waiting_field = State()
    editing_login = State()
    editing_password = State()
    editing_group = State()
    editing_status = State()
    editing_description = State()
    confirm = State()
edit_st = EditStudentFSM

class SubjectFSM(StatesGroup):
    choose_action = State()
    wait_name = State()
    wait_id = State()
    wait_edit_new_name = State()
    

class TeacherFSM(StatesGroup):
    choose_action = State()
    wait_name = State()
    wait_id = State()
    wait_new_name = State()

class DebtFSM(StatesGroup):
    choose_action = State()
    wait_student = State()
    wait_add_disc = State()
    wait_add_type = State()
    wait_add_date = State()
    wait_del = State()
    wait_edit_id = State()
    wait_edit_field = State()
    wait_edit_value = State()

class NewsGroupsFSM(StatesGroup):
    waiting_for_group_ids = State()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
async def get_student_by_login(login: str) -> Optional[Tuple]:
    """–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É"""
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login, password, telegram_id, is_active FROM students WHERE login = ?",
                (login,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Error in get_student_by_login: {e}")
        return None

async def update_telegram_for_student(id_student: int, telegram_id: int) -> bool:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            try:
                await conn.execute(
                    "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                    (telegram_id,))
                await conn.execute(
                    "UPDATE students SET telegram_id = ?, is_active = 1 WHERE id_student = ?",
                    (telegram_id, id_student))
                await conn.commit()
                return True
            except Exception as e:
                await conn.rollback()
                logger.error(f"Transaction failed: {e}")
                return False
    except Exception as e:
        logger.error(f"Database error: {e}")
        return False

async def get_student_by_telegram(telegram_id: int) -> Optional[Tuple]:
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login, is_active FROM students WHERE telegram_id = ?", 
                (telegram_id,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Database error in get_student_by_telegram: {e}")
        return None

async def remove_telegram_binding(telegram_id: int) -> bool:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            await conn.execute(
                "DELETE FROM sent_notifications WHERE user_id = ?",
                (telegram_id,))
            await conn.execute(
                "UPDATE students SET telegram_id = NULL, is_active = 0 WHERE telegram_id = ?",
                (telegram_id,))
            await conn.commit()
            return True
    except Exception as e:
        logger.error(f"Error in remove_telegram_binding: {e}")
        if conn:
            await conn.rollback()
        return False

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT telegram_id FROM students WHERE login = ? AND telegram_id = ?",
                (os.getenv("ADMIN_LOGIN"), telegram_id)
            ) as cur:
                return await cur.fetchone() is not None
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False
    

async def safe_send_message(message: Message, text: str, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏,
    –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    """
    MAX_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    
    try:
        if len(text) <= MAX_LENGTH:
            await message.answer(text, **kwargs)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            while text:
                if len(text) > MAX_LENGTH:
                    part = text[:MAX_LENGTH]
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
                    last_newline = part.rfind('\n')
                    if last_newline > 0:
                        part = part[:last_newline]
                    parts.append(part)
                    text = text[len(part):].lstrip('\n')
                else:
                    parts.append(text)
                    text = ''
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for part in parts:
                await message.answer(part, **kwargs)
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")



async def cleanup_deleted_records():
    try:
        async with db.get_connection() as conn:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å soft delete
            tables = [
                "tests", "student_debts", 
            ]
            
            for table in tables:
                    await conn.execute(f"DELETE FROM {table} WHERE deleted_at NOT NULL")
            await conn.commit()
        return True
    except Exception as e:
        logger.error(f"Error cleaning up deleted records: {e}")
        return False


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ ====================
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    if data.get("is_admin"):
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

def add_cancel_to_states(cls):
    for st in cls.__states__:
        router.message(st, Command("cancel"))(cancel_command)
        router.message(st, lambda m: m.text and m.text.lower() in ("–æ—Ç–º–µ–Ω–∞", "/–æ—Ç–º–µ–Ω–∞"))(cancel_command)
    return cls
add_cancel_to_states(AuthStates)
add_cancel_to_states(StudentRegisterState)
add_cancel_to_states(AddTestStates)
add_cancel_to_states(EditStudentFSM)
add_cancel_to_states(SubjectFSM)
add_cancel_to_states(TeacherFSM)
add_cancel_to_states(DebtFSM)
add_cancel_to_states(NewsGroupsFSM)

# ==================== –ö–û–ú–ê–ù–î–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ====================
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    student = await get_student_by_telegram(message.from_user.id)
    if student:
        if await is_admin(message.from_user.id):
            await message.answer("üîê –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
        else:
            await message.answer("üîó –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é", reply_markup=kb.main)
            await state.set_state(AuthStates.authorized)
        return
    await message.answer("üö™–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_for_login)

@router.message(AuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    await state.update_data(login=login)
    await message.answer('üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
    await state.set_state(AuthStates.waiting_for_password)

@router.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    login = data.get("login")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if login == os.getenv("ADMIN_LOGIN") and password == os.getenv("ADMIN_PASSWORD"):
        await state.update_data(is_admin=True)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                (message.from_user.id,))
            await conn.execute(
                "UPDATE students SET telegram_id = ? WHERE login = ?",
                (message.from_user.id, login))
            await conn.commit()
        
        await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
        return

    student = await get_student_by_login(login)
    if student and await pm.verify_password(student[2], password):
        if not student[4]:  # is_active
            await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            await state.clear()
            return
            
        if await get_student_by_telegram(message.from_user.id):
            await message.answer('üîó –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é. –î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unbind')
            await state.clear()
            return
            
        if await update_telegram_for_student(student[0], message.from_user.id):
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=kb.main)
            await state.set_state(AuthStates.authorized)
            await state.update_data(is_admin=False)
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            await state.clear()
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–õ–æ–≥–∏–Ω:')
        await state.set_state(AuthStates.waiting_for_login)

@router.message(Command("unbind"))
async def unbind(message: Message, state: FSMContext):
    if await remove_telegram_binding(message.from_user.id):
        await message.answer("‚ùå –í–∞—à Telegram –±—ã–ª –æ—Ç–≤—è–∑–∞–Ω. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()
    else:
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏–±–æ –±—ã–ª —É–∂–µ –æ—Ç–≤—è–∑–∞–Ω")

@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            await conn.execute(
                "UPDATE students SET is_active = 0 WHERE telegram_id = ?",
                (message.from_user.id,))
            await conn.commit()
    except Exception as e:
        logger.error(f"Error marking user inactive: {e}")
    
    await state.clear()
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", 
                       reply_markup=types.ReplyKeyboardRemove())

# ==================== –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´ ====================
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("‚ÑπÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_admin_menu(message: Message, state: FSMContext):
    await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def back_to_root_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("‚ÑπÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

# ==================== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb.schedule_menu)

@router.message(F.text == "üë• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
async def show_group_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–≥—Ä—É–ø–ø.xlsx"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="üë• –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
    else:
        await message.answer("‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def show_teacher_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.xls"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="üë®‚Äçüè´ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "‚è≥ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
async def show_debts_schedule(message: Message):
    file_path = "–ì—Ä–∞—Ñ–∏–∫_–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.xlsx"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="‚è≥ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
    else:
        await message.answer("‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "üìù –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏")
async def show_debts(message: Message):
    student = await get_student_by_telegram(message.from_user.id)
    if not student:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start", reply_markup=kb.main)
        return

    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT subj.name, dt.name, sd.last_date
                FROM student_debts sd
                JOIN disciplines d ON sd.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN debt_types dt ON sd.debt_type_id = dt.id
                WHERE sd.student_id = ? AND sd.deleted_at IS NULL
                ORDER BY sd.last_date
            ''', (student[0],)) as cursor:
                debts = await cursor.fetchall()

        if not debts:
            await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
            return

        response = "üìù –í–∞—à–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏:\n\n"
        for subj_name, debt_type, last_date in debts:
            response += (
                f"üìö {subj_name}\n"
                f"üî¥ {debt_type}\n"
                f"‚è≥ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {last_date}\n"
                "----------\n"
            )
        await safe_send_message(message, response, parse_mode="HTML")
        

    except Exception as e:
        logger.error(f"Error fetching debts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö")

@router.message(F.text == "üìä –¢–µ—Å—Ç—ã")
async def show_tests(message: Message):
    student = await get_student_by_telegram(message.from_user.id)
    if not student:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start", reply_markup=kb.main)
        return

    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT t.date, subj.name, tch.full_name, t.test_link
                FROM tests t
                JOIN disciplines d ON t.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN teachers tch ON d.teacher_id = tch.id
                WHERE t.group_id = (SELECT id_group FROM students WHERE id_student = ?) AND t.deleted_at IS NULL
                ORDER BY t.date ASC
                LIMIT 10
            ''', (student[0],)) as cursor:
                tests = await cursor.fetchall()

        if not tests:
            await message.answer("üéâ –£ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤")
            return

        response = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Ç–µ—Å—Ç—ã –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:\n\n"
        for date, subj, teacher, test_link in tests:
            response += (
                f"üìÖ {date}\n"
                f"üìö {subj}\n"
                f"üë®‚Äçüè´ {teacher}\n"
                f"üîó <a href=\"{test_link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç</a>\n"
                "----------\n"
            )
        await safe_send_message(message, response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error fetching tests: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: Message):
    try:
        student = await get_student_by_telegram(message.from_user.id)
        if not student:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT n.id, n.title, n.description, n.date, n.place 
                FROM news n
                LEFT JOIN news_groups ng ON n.id = ng.news_id
                WHERE n.is_published = 1
                AND (n.for_all_groups = 1 OR ng.group_id = (
                    SELECT id_group FROM students WHERE id_student = ?
                ))
                ORDER BY n.date DESC
                LIMIT 10
            ''', (student[0],)) as cursor:
                news_items = await cursor.fetchall()

            if not news_items:
                await message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            for news in news_items:
                news_id, title, description, date, place = news
                response += (
                    f"üìå <b>{title}</b>\n"
                    f"üìÖ {date}\n"
                )
                if place:
                    response += f"üìç {place}\n"
                response += f"\n{description}\n\n"
                response += "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n\n"

            await safe_send_message(message, response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error fetching news: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–µ—Å—Ç–∞–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏")
async def manage_tests(message: Message, state: FSMContext):
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ—Å—Ç–∞–º–∏:",
        reply_markup=kb.tests_admin_kb
    )

@router.message(AuthStates.admin_mode, F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç")
async def test_add_start(message: Message, state: FSMContext):
    # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name_group FROM groups ORDER BY id") as cursor:
            groups = await cursor.fetchall()
    if not groups:
        await message.answer("‚ùå –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    await state.update_data(groups=groups)
    group_list = '\n'.join([f"{g[0]}: {g[1]}" for g in groups])
    await message.answer(f"üë• –í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–∞:\n{group_list}")
    await state.set_state(AddTestStates.waiting_group)

@router.message(AddTestStates.waiting_group)
async def test_add_group(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã")
        return
    await state.update_data(group_id=group_id)
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT s.id, s.name
            FROM disciplines d
            JOIN subjects s ON d.subject_id = s.id
            WHERE d.group_id = ?
            GROUP BY s.id
            ORDER BY s.name
        ''', (group_id,)) as cursor:
            subjects = await cursor.fetchall()
    if not subjects:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –≥—Ä—É–ø–ø—ã!")
        await state.set_state(AuthStates.admin_mode)
        return
    subject_list = '\n'.join([f"{sid}: {sname}" for sid, sname in subjects])
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await safe_send_message(message, subject_list)
    await state.set_state(AddTestStates.waiting_subject)

@router.message(AddTestStates.waiting_subject)
async def test_add_subject(message: Message, state: FSMContext):
    try: subject_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–µ–¥–º–µ—Ç–∞")
        return

    await state.update_data(subject_id=subject_id)
    group_id = (await state.get_data())["group_id"]
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT t.id, t.full_name
            FROM disciplines d
            JOIN teachers t ON d.teacher_id = t.id
            WHERE d.group_id = ? AND d.subject_id = ?
            GROUP BY t.id
            ORDER BY t.full_name
        ''', (group_id, subject_id)) as cursor:
            teachers = await cursor.fetchall()
    if not teachers:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞/–≥—Ä—É–ø–ø—ã!")
        await state.set_state(AuthStates.admin_mode)
        return
    teachers_str = '\n'.join([f"{tid}: {tname}" for tid, tname in teachers])
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n")
    await safe_send_message(message, teachers_str)
    await state.set_state(AddTestStates.waiting_teacher)

@router.message(AddTestStates.waiting_teacher)
async def test_add_teacher(message: Message, state: FSMContext):
    try: teacher_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    await state.update_data(teacher_id=teacher_id)
    await message.answer("‚ÑπÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç:")
    await state.set_state(AddTestStates.waiting_link)

@router.message(AddTestStates.waiting_link)
async def test_add_link(message: Message, state: FSMContext):
    link = message.text.strip()
    await state.update_data(test_link=link)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Å—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddTestStates.waiting_date)

@router.message(AddTestStates.waiting_date)
async def test_add_date(message: Message, state: FSMContext):
    date = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        return
    data = await state.get_data()
    # –¢—É—Ç –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å discipline_id
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT id FROM disciplines 
            WHERE subject_id = ? AND teacher_id = ? AND group_id = ?
        ''', (data["subject_id"], data["teacher_id"], data["group_id"])) as cursor:
            discipline = await cursor.fetchone()
    if not discipline:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π")
        await state.set_state(AuthStates.admin_mode)
        return
    try:
        async with db.get_connection() as conn:
            await conn.execute('''
                INSERT INTO tests (group_id, discipline_id, test_link, date,created_at,updated_at)
                VALUES (?, ?, ?, ?,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ''', (data["group_id"], discipline[0], data["test_link"], date))
            await conn.commit()
            await message.answer("‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                         f"üë• –ì—Ä—É–ø–ø–∞: {data['group_id']}\n"
                         f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data['subject_id']}\n"
                         f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {data['teacher_id']}\n"
                         f"üîó –°—Å—ã–ª–∫–∞: {data['test_link']}\n"
                         f"‚è≥ –î–∞—Ç–∞: {date}",
                         reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç.")
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")
async def list_tests(message: Message):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT t.id, g.name_group, s.name, tch.full_name, t.date, t.test_link
                FROM tests t
                JOIN groups g ON t.group_id = g.id
                JOIN disciplines d ON t.discipline_id = d.id
                JOIN subjects s ON d.subject_id = s.id
                JOIN teachers tch ON d.teacher_id = tch.id
                WHERE t.deleted_at IS NULL
                ORDER BY t.date DESC
                LIMIT 20
            ''') as cursor:
                tests = await cursor.fetchall()
        
        if not tests:
            await message.answer("üéâ –¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
            
        response = "üìä –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤:\n\n"
        for test in tests:
            test_id, group, subject, teacher, date, link = test
            response += (
                f"üìå ID: {test_id}\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n\n"
            )
        await safe_send_message(message, response, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"Error fetching tests list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")


@router.message(AuthStates.admin_mode, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
async def delete_test_start(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT t.id, g.name_group, s.name, t.date
                FROM tests t
                JOIN groups g ON t.group_id = g.id
                JOIN disciplines d ON t.discipline_id = d.id
                JOIN subjects s ON d.subject_id = s.id
                WHERE t.deleted_at IS NULL
                ORDER BY t.date DESC
                LIMIT 50
            ''') as cursor:
                tests = await cursor.fetchall()
        
        if not tests:
            await message.answer("‚ùå –¢–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç")
            return
            
        tests_list = "\n".join([f"{t[0]}: {t[1]} - {t[2]} ({t[3]})" for t in tests])
        await message.answer ("üìö –í–≤–µ–¥–∏—Ç–µ ID —Ç–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await safe_send_message(message, tests_list, parse_mode="HTML")
        await state.set_state(AddTestStates.waiting_test_delete)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")

@router.message(AddTestStates.waiting_test_delete)
async def execute_delete_test(message: Message, state: FSMContext):
    if message.text.lower() == "/cancel":
        return
    
    try:
        test_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìö –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ç–µ—Å—Ç–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT t.id, g.name_group, s.name, tch.full_name, t.date, t.test_link
                FROM tests t
                JOIN groups g ON t.group_id = g.id
                JOIN disciplines d ON t.discipline_id = d.id
                JOIN subjects s ON d.subject_id = s.id
                JOIN teachers tch ON d.teacher_id = tch.id
                WHERE t.id = ? AND t.deleted_at IS NULL
            ''', (test_id,)) as cursor:
                test = await cursor.fetchone()
        
        if not test:
            await message.answer("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(AuthStates.admin_mode)
            return
            
        async with db.get_connection() as conn:
            await conn.execute("""
                UPDATE tests 
                SET deleted_at = CURRENT_TIMESTAMP, 
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (test_id,))
            await conn.commit()

        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {test[1]}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {test[2]}\n"
            f"‚è≥ –î–∞—Ç–∞: {test[4]}",
            reply_markup=kb.admin_kb
        )
        await state.set_state(AuthStates.admin_mode)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ")

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–°–¢–Ø–ú–ò ====================
@router.message(AuthStates.admin_mode, F.text == "üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏")
async def manage_news(message: Message):
    await message.answer("üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=kb.news_admin_kb)

@router.message(AuthStates.admin_mode, F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def add_news_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(AuthStates.add_news_title)

@router.message(AuthStates.add_news_title)
async def add_news_title(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(AuthStates.add_news_description)

@router.message(AuthStates.add_news_description)
async def add_news_description(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
    await state.update_data(description=message.text)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AuthStates.add_news_date)

@router.message(AuthStates.add_news_date)
async def add_news_date(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
    date_str = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        return
    await state.update_data(date=message.text)
    await message.answer("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(AuthStates.add_news_place)

@router.message(AuthStates.add_news_place, Command("skip"))
async def skip_news_place(message: Message, state: FSMContext):
    await state.update_data(place=None)
    await message.answer("üë• –ù–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AuthStates.add_news_groups)

@router.message(AuthStates.add_news_place)
async def add_news_place(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
    await state.update_data(place=message.text)
    await message.answer("üë• –ù–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AuthStates.add_news_groups)

@router.message(AuthStates.add_news_groups)
async def add_news_groups(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    data = await state.get_data()
    for_all = message.text.lower() == "–¥–∞"
    try:
        async with db.get_connection() as conn:
            cursor = await conn.execute(
                '''INSERT INTO news (title, description, date, place, for_all_groups) 
                   VALUES (?, ?, ?, ?, ?)''',
                (data['title'], data['description'], data['date'], data.get('place'), int(for_all)))
            news_id = cursor.lastrowid

            if not for_all:
                # –ó–∞–ø—Ä–æ—Å–∏–º id –≥—Ä—É–ø–ø
                await state.update_data(news_id=news_id)
                async with conn.execute("SELECT id, name_group FROM groups") as c:
                    groups = await c.fetchall()
                gr = '\n'.join(f"{g[0]}: {g[1]}" for g in groups)
                await message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n{gr}")
                await state.set_state(NewsGroupsFSM.waiting_for_group_ids)
                await conn.commit()  # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                return
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: {news_id}", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except Exception as e:
        logger.error(f"Error adding news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(NewsGroupsFSM.waiting_for_group_ids)
async def add_news_group_ids(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    data = await state.get_data()
    news_id = data["news_id"]
    group_ids = [int(x) for x in message.text.replace(" ", "").split(",") if x.isdigit()]

        
    try:
        async with db.get_connection() as conn:
            await conn.executemany(
                "INSERT INTO news_groups (news_id, group_id) VALUES (?, ?)",
                [(news_id, gid) for gid in group_ids]
            )
            await conn.commit()
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≥—Ä—É–ø–ø–∞–º", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"Error attaching news to groups: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≥—Ä—É–ø–ø", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def list_news(message: Message):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT id, title, date, is_published FROM news ORDER BY date DESC LIMIT 20
            ''') as cursor:
                news_list = await cursor.fetchall()
        
        if not news_list:
            await message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return
            
        response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for news in news_list:
            news_id, title, date, is_published = news
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if is_published else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
            response += f"üìå <b>{title}</b>\nüìÖ {date}\n{status}\nID: {news_id}\n\n"
        
        await safe_send_message(message, response, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"Error fetching news list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.")

@router.message(AuthStates.admin_mode, F.text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def publish_news_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await state.set_state(AuthStates.publish_news)

@router.message(AuthStates.publish_news)
async def publish_news_execute(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        news_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute(
                "UPDATE news SET is_published = 1 WHERE id = ?",
                (news_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏: ")
    except Exception as e:
        logger.error(f"Error publishing news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def delete_news_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AuthStates.delete_news)

@router.message(AuthStates.delete_news)
async def delete_news_execute(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        news_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM news_groups WHERE news_id = ?", (news_id,))
            await conn.execute("DELETE FROM news WHERE id = ?", (news_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} —É–¥–∞–ª–µ–Ω–∞", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏:")
    except Exception as e:
        logger.error(f"Error deleting news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
@router.message(AuthStates.admin_mode, F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: Message, state: FSMContext):
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb.students_admin_kb)

@router.message(AuthStates.admin_mode, F.text == "üîó –û—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unbind_user_start(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT s.id_student, s.login, s.telegram_id, g.name_group 
                FROM students s
                JOIN groups g ON s.id_group = g.id
                WHERE s.telegram_id IS NOT NULL
                ORDER BY g.name_group, s.login
            ''') as cursor:
                users = await cursor.fetchall()
        
        if not users:
            await message.answer("ü§∑ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
            
        response = "üë• –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            user_id, login, tg_id, group = user
            response += f"üë§ {login} (–ì—Ä—É–ø–ø–∞: {group})\nID: {user_id} | TG: {tg_id}\n\n"
        
        response += "\nüîó –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏–ª–∏ /all –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –≤—Å–µ—Ö:"
        await safe_send_message(message, response)
        await state.set_state(AuthStates.unbind_user_select)
    
    except Exception as e:
        logger.error(f"Error fetching users list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(AuthStates.unbind_user_select, Command("all"))
async def unbind_all_confirm(message: Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AuthStates.unbind_all_confirm)

@router.message(AuthStates.unbind_all_confirm, F.text.lower() == "–¥–∞")
async def unbind_all_execute(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("UPDATE students SET telegram_id = NULL")
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await conn.execute("DELETE FROM sent_notifications")
            await conn.commit()
            
        await message.answer("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    except Exception as e:
        logger.error(f"Error unbinding all users: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.unbind_user_select)
async def unbind_single_user(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        user_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with conn.execute(
                "SELECT telegram_id FROM students WHERE id_student = ?",
                (user_id,)
            ) as cursor:
                tg_id = await cursor.fetchone()
                
            if not tg_id:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE id_student = ?",
                (user_id,))
            # –£–¥–∞–ª—è–µ–º –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await conn.execute(
                "DELETE FROM sent_notifications WHERE user_id = ?",
                (tg_id[0],))
            await conn.commit()
            
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ /all")
    except Exception as e:
        logger.error(f"Error unbinding user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def add_student_start(message: Message, state: FSMContext):
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    await state.set_state(add_states.waiting_login)

@router.message(add_states.waiting_login)
async def add_student_login(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    login = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
    async with db.get_connection() as conn:
        async with conn.execute("SELECT 1 FROM students WHERE login = ?", (login,)) as cur:
            exists = await cur.fetchone()
    if exists:
        await message.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
        return
    await state.update_data(login=login)
    await message.answer("üîê –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    await state.set_state(add_states.waiting_password)

@router.message(add_states.waiting_password)
async def add_student_password(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    password = message.text.strip()
    await state.update_data(password=password)
    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name_group FROM groups ORDER BY name_group") as cursor:
            groups = await cursor.fetchall()
    group_list = "\n".join([f"{gid}: {gname}" for gid, gname in groups])
    await message.answer(f"üë• –í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{group_list}")
    await state.set_state(add_states.waiting_group)

@router.message(add_states.waiting_group)
async def add_student_group(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        group_id = int(message.text.strip())
        async with db.get_connection() as conn:
            async with conn.execute("SELECT name_group FROM groups WHERE id = ?", (group_id,)) as cur:
                group = await cur.fetchone()
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã")
        return

    await state.update_data(group_id=group_id)
    await message.answer("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –§–ò–û –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(add_states.waiting_description)

@router.message(add_states.waiting_description, Command("skip"))
async def add_student_skip_desc(message: Message, state: FSMContext):
    await state.update_data(description=None)
    await finish_student_add(message, state)

@router.message(add_states.waiting_description)
async def add_student_desc(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    await state.update_data(description=message.text)
    await finish_student_add(message, state)

async def finish_student_add(message: Message, state: FSMContext):
    data = await state.get_data()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
    try:
        hashed_password = await pm.hash_password(data["password"])
        async with db.get_connection() as conn:
            await conn.execute('''
                INSERT INTO students (login, password, id_group, description) 
                VALUES (?, ?, ?, ?)
            ''', (data["login"], hashed_password, data["group_id"], data.get("description",None)))
            await conn.commit()
        await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {data['login']} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def list_students(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT s.id_student, s.login, g.name_group, s.is_active, s.telegram_id 
                FROM students s
                JOIN groups g ON s.id_group = g.id
                ORDER BY s.id_student
            ''') as cursor:
                students = await cursor.fetchall()
        
        if not students:
            await message.answer("ü§∑ –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
            return
        
        chunk_size = 70
        for i in range(0, len(students), chunk_size):
            chunk = students[i:i + chunk_size]
            msg = ["üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:"] if i == 0 else []
            
            for student in chunk:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if student[3] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                tg_status = "‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω" if student[4] else "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
                msg.append(f"{student[0]}: {student[1]} ({student[2]}) [{status}] [{tg_status}]")
            
            await message.answer("\n".join(msg))
    
    except Exception as e:
        logger.error(f"Error fetching students list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def edit_student_start(message: Message, state: FSMContext):
    # —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    try:
        async with db.get_connection() as conn:
            async with conn.execute("""
                SELECT s.id_student, s.login, g.name_group
                FROM students s
                JOIN groups g ON s.id_group = g.id
                ORDER BY s.id_student
            """) as cur:
                students = await cur.fetchall()
        
        if not students:
                await message.answer("ü§∑ –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
                return
        
        chunk_size = 70
        for i in range(0, len(students), chunk_size):
            chunk = students[i:i + chunk_size]
            msg = ["üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:"] if i == 0 else []
            
            for student in chunk:
                msg.append(f"{student[0]}: {student[1]} ({student[2]})")
            await message.answer("\n".join(msg))

    except Exception as e:
        logger.error(f"Error fetching students list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

    await state.set_state(edit_st.waiting_id)

@router.message(edit_st.waiting_id)
async def edit_student_select(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        student_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
        return

    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, s.login, s.password, g.name_group, s.is_active, s.description, s.id_group
            FROM students s
            JOIN groups g ON s.id_group = g.id
            WHERE s.id_student = ?
        """, (student_id,)) as cur:
            student = await cur.fetchone()
    if not student:
        await message.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.set_state(AuthStates.admin_mode)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É –≤ FSM
    await state.update_data(
        id_student=student[0], login=student[1], password=student[2], group_name=student[3],
        is_active=student[4], description=student[5] or "", id_group=student[6]
    )
    msg = (
        f"–í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç:\n"
        f"üë§–õ–æ–≥–∏–Ω: {student[1]}\n"
        f"üë•–ì—Ä—É–ø–ø–∞: {student[3]}\n"
        f"‚ÑπÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ: {student[5] or '–ù–µ—Ç'}\n"
        f"‚è≥–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if student[4] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        f"–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    await message.answer(msg, reply_markup=kb.edit_student_kb, parse_mode="HTML")
    await state.set_state(edit_st.main_menu)

# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê ====================
@router.message(edit_st.main_menu, F.text == "üë§ –õ–æ–≥–∏–Ω")
async def edit_student_login_btn(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:")
    await state.set_state(edit_st.editing_login)

@router.message(edit_st.main_menu, F.text == "üîó –ü–∞—Ä–æ–ª—å")
async def edit_student_password_btn(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(edit_st.editing_password)

@router.message(edit_st.main_menu, F.text == "üë• –ì—Ä—É–ø–ø–∞")
async def edit_student_group_btn(message: Message, state: FSMContext):
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id,name_group FROM groups") as cur:
            groups = await cur.fetchall()
    gr = '\n'.join(f"{gid}: {gname}" for gid, gname in groups)
    await message.answer(f"üìã –í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã:\n{gr}")
    await state.set_state(edit_st.editing_group)

@router.message(edit_st.main_menu, F.text == "‚è≥ –°—Ç–∞—Ç—É—Å")
async def edit_student_status_btn(message: Message, state: FSMContext):
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:")
    await state.set_state(edit_st.editing_status)

@router.message(edit_st.main_menu, F.text == "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ")
async def edit_student_description_btn(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(edit_st.editing_description)

@router.message(edit_st.main_menu, F.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
async def edit_student_save_btn(message: Message, state: FSMContext):
    await edit_student_save(message, state)

@router.message(edit_st.main_menu, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def edit_student_cancel_btn(message: Message, state: FSMContext):
    await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)


@router.message(edit_st.editing_login)
async def edit_student_login(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    await state.update_data(login=message.text.strip())
    await message.answer("‚úÖ –õ–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_password)
async def edit_student_password(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    password = await pm.hash_password(message.text.strip())
    await state.update_data(password=password)
    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_group)
async def edit_student_group(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        group_id = int(message.text.strip())
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        async with db.get_connection() as conn:
            async with conn.execute("SELECT name_group FROM groups WHERE id = ?", (group_id,)) as cur:
                group = await cur.fetchone()
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ ID –µ—â—ë —Ä–∞–∑")
            return
    except ValueError:
        await message.answer("‚ùå ID –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
        return
    await state.update_data(id_group=group_id, group_name=group[0])
    await message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_status)
async def edit_student_status(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    text = message.text.strip().lower()
    if text not in ["–∞–∫—Ç–∏–≤–µ–Ω", "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", "1", "0"]:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ '–∞–∫—Ç–∏–≤–µ–Ω' –∏–ª–∏ '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' (–∏–ª–∏ 1/0)")
        return
        
    is_active = 1 if text in ["–∞–∫—Ç–∏–≤–µ–Ω", "1"] else 0
    await state.update_data(is_active=is_active)
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
                       reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_description)
async def edit_student_description(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    await state.update_data(description=message.text.strip())
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.confirm)
async def edit_student_save(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                UPDATE students SET login = ?, password = ?, id_group = ?, is_active = ?, description = ?
                WHERE id_student = ?
            """, (
                data["login"], data["password"], data["id_group"], data["is_active"], data["description"], data["id_student"]
            ))
            await conn.commit()
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    await state.set_state(AuthStates.admin_mode)



@router.message(AuthStates.admin_mode, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def delete_student_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AuthStates.delete_student)

@router.message(AuthStates.delete_student)
async def delete_student_process(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        student_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM students WHERE id_student = ?", (student_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É–¥–∞–ª–µ–Ω", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞: ")
    except Exception as e:
        logger.error(f"Error deleting student: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
async def manage_subjects(message: Message, state: FSMContext):
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.subjects_admin_kb
    )
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.choose_action)
async def subject_action(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    if message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        await state.set_state(SubjectFSM.wait_name)
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer(
            "üìö –ü—Ä–µ–¥–º–µ—Ç—ã:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs]),
            reply_markup=kb.subjects_admin_kb
        )
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs])
        )
        await state.set_state(SubjectFSM.wait_id)
    elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs])
        )
        await state.set_state(SubjectFSM.wait_id)
    elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É":
        await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.subjects_admin_kb)

@router.message(SubjectFSM.wait_name)
async def subject_add(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    name = message.text.strip()
    try:
        async with db.get_connection() as conn:
            await conn.execute("INSERT INTO subjects (name) VALUES (?)", (name,))
            await conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç \"{name}\" –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.wait_id)
async def subject_edit_delete(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        subj_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
        
    await state.update_data(subj_id=subj_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ /del –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(SubjectFSM.wait_edit_new_name)

@router.message(SubjectFSM.wait_edit_new_name, Command("del"))
async def subject_del(message: Message, state: FSMContext):
    subj_id = (await state.get_data()).get("subj_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM subjects WHERE id = ?", (subj_id,))
            await conn.commit()
        await message.answer("üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.wait_edit_new_name)
async def subject_edit_name(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    new_name = message.text.strip()
    subj_id = (await state.get_data()).get("subj_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("UPDATE subjects SET name = ? WHERE id = ?", (new_name, subj_id))
            await conn.commit()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å")
    await state.set_state(SubjectFSM.choose_action)

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_teachers(message: Message, state: FSMContext):
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=kb.teachers_admin_kb
    )
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.choose_action, F.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def teacher_list(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, full_name FROM teachers ORDER BY full_name") as cur:
                teachers = await cur.fetchall()
        
        if not teachers:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=kb.teachers_admin_kb)
            return
            
        teachers_list = "\n".join([f"{teacher[0]}: {teacher[1]}" for teacher in teachers])
        await message.answer(
            f"üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n{teachers_list}",
            reply_markup=kb.teachers_admin_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", reply_markup=kb.teachers_admin_kb)

@router.message(TeacherFSM.choose_action, F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
async def teacher_add_prompt(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await state.set_state(TeacherFSM.wait_name)

@router.message(TeacherFSM.wait_name)
async def teacher_add(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        async with db.get_connection() as conn:
            await conn.execute("INSERT INTO teachers (full_name) VALUES (?)", (name,))
            await conn.commit()
        await message.answer(
            f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å \"{name}\" –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=kb.teachers_admin_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", reply_markup=kb.teachers_admin_kb)
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.choose_action, F.text.in_(["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"]))
async def teacher_edit_delete_prompt(message: Message, state: FSMContext):
    action = "edit" if message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" else "delete"
    await state.update_data(action=action)
    
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, full_name FROM teachers ORDER BY full_name") as cur:
            ts = await cur.fetchall()
    
    await message.answer(
        f"üìù –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è {'—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' if action == 'edit' else '—É–¥–∞–ª–µ–Ω–∏—è'}:\n" +
        "\n".join([f"{x[0]}: {x[1]}" for x in ts])
    )
    await state.set_state(TeacherFSM.wait_id)

@router.message(TeacherFSM.wait_id)
async def teacher_process_id(message: Message, state: FSMContext):
    try:
        teacher_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
        
    data = await state.get_data()
    action = data.get("action")
    
    if action == "edit":
        await state.update_data(teacher_id=teacher_id)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        await state.set_state(TeacherFSM.wait_new_name)
    elif action == "delete":
        try:
            async with db.get_connection() as conn:
                await conn.execute("DELETE FROM teachers WHERE id = ?", (teacher_id,))
                await conn.commit()
            await message.answer("üóëÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=kb.teachers_admin_kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=kb.teachers_admin_kb)
        await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.wait_new_name)
async def teacher_update_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    teacher_id = (await state.get_data()).get("teacher_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("UPDATE teachers SET full_name = ? WHERE id = ?", (new_name, teacher_id))
            await conn.commit()
        await message.answer("‚úÖ –ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=kb.teachers_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=kb.teachers_admin_kb)
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.choose_action, F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def teacher_back(message: Message, state: FSMContext):
    await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "‚è≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏")
async def manage_debts(message: Message, state: FSMContext):
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=kb.debts_admin_kb
    )
    await state.set_state(DebtFSM.choose_action)

@router.message(DebtFSM.choose_action, F.text == "üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤")
async def debt_list(message: Message, state: FSMContext):
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, s.login, subj.name, dt.name, sd.last_date
            FROM student_debts sd
            JOIN students s ON sd.student_id = s.id_student
            JOIN disciplines d ON sd.discipline_id = d.id
            JOIN subjects subj ON d.subject_id = subj.id
            JOIN debt_types dt ON sd.debt_type_id = dt.id
            WHERE sd.deleted_at IS NULL
            ORDER BY s.id_student
        """) as cur:
            debts = await cur.fetchall()
    
    if not debts:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
    msg_parts = []
    current_part = "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
    
    for st in debts:
        line = f"{st[0]}: {st[1]} –ø–æ {st[2]} ({st[3]}) - –¥–æ {st[4]}\n"
        if len(current_part) + len(line) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            msg_parts.append(current_part)
            current_part = line
        else:
            current_part += line
    
    if current_part:
        msg_parts.append(current_part)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
    for part in msg_parts:
        await safe_send_message(message, part)

@router.message(DebtFSM.choose_action, F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥")
async def debt_add(message: Message, state: FSMContext):
    # –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id_student, login FROM students ORDER BY login") as cur:
            studs = await cur.fetchall()
    
    if not studs:
        await message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
        return
    
    students_list = "\n".join([f"{s[0]}: {s[1]}" for s in studs])
    await safe_send_message(
        message, 
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞:\n" + students_list,
        parse_mode=None
    )
    await state.set_state(DebtFSM.wait_student)

@router.message(DebtFSM.wait_student)
async def debt_choose_student(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        student_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id_student FROM students WHERE id_student = ?", (student_id,)) as cur:
            if not await cur.fetchone():
                await message.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
    
    await state.update_data(student_id=student_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT d.id, s.name, t.full_name 
            FROM disciplines d
            JOIN subjects s ON d.subject_id = s.id
            JOIN teachers t ON d.teacher_id = t.id
            ORDER BY s.name
        """) as cur:
            disciplines = await cur.fetchall()
    
    if not disciplines:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
        return
        
    disciplines_list = "\n".join([f"{d[0]}: {d[1]} ({d[2]})" for d in disciplines])
    await safe_send_message(
        message,
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n" + disciplines_list,
        parse_mode=None
    )
    await state.set_state(DebtFSM.wait_add_disc)

@router.message(DebtFSM.wait_add_disc)
async def debt_choose_disc(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        discipline_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id FROM disciplines WHERE id = ?", (discipline_id,)) as cur:
            if not await cur.fetchone():
                await message.answer("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
    
    await state.update_data(discipline_id=discipline_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –¥–æ–ª–≥–æ–≤
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name FROM debt_types ORDER BY name") as cur:
            types = await cur.fetchall()
    
    if not types:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–ª–≥–æ–≤")
        return
        
    types_list = "\n".join([f"{t[0]}: {t[1]}" for t in types])
    await safe_send_message(
        message,
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–∏–ø–∞ –¥–æ–ª–≥–∞:\n" + types_list,
        parse_mode=None
    )
    await state.set_state(DebtFSM.wait_add_type)

@router.message(DebtFSM.wait_add_type)
async def debt_choose_type(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    try:
        debt_type_id = int(message.text.strip())
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ç–∏–ø–∞ –¥–æ–ª–≥–∞")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–ª–≥–∞
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id FROM debt_types WHERE id = ?", (debt_type_id,)) as cur:
            if not await cur.fetchone():
                await message.answer("‚ùå –¢–∏–ø –¥–æ–ª–≥–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
    
    await state.update_data(debt_type_id=debt_type_id)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(DebtFSM.wait_add_date)

@router.message(DebtFSM.wait_add_date)
async def debt_choose_date(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
    
    date = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        return
        
    data = await state.get_data()
    await state.update_data(last_date=date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–ª–≥
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT 1 FROM student_debts 
            WHERE student_id = ? AND discipline_id = ? AND debt_type_id = ? AND deleted_at IS NULL
        """, (data["student_id"], data["discipline_id"], data["debt_type_id"])) as cur:
            if await cur.fetchone():
                await message.answer("‚ùå –¢–∞–∫–æ–π –¥–æ–ª–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
    
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                INSERT INTO student_debts (student_id, discipline_id, debt_type_id, last_date, created_at, updated_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (data["student_id"], data["discipline_id"], data["debt_type_id"], date))
            await conn.commit()
            
        await safe_send_message(
            message,
            "‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç ID: {data['student_id']}\n"
            f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ID: {data['discipline_id']}\n"
            f"‚ÑπÔ∏è –¢–∏–ø –¥–æ–ª–≥–∞ ID: {data['debt_type_id']}\n"
            f"‚è≥ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {date}",
            reply_markup=kb.debts_admin_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞")
    
    await state.set_state(DebtFSM.choose_action)

@router.message(DebtFSM.choose_action, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥")
async def debt_edit_start(message: Message, state: FSMContext):
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, d.id, dt.id, s.login, subj.name, dt.name, sd.last_date
            FROM student_debts sd
            JOIN students s ON sd.student_id = s.id_student
            JOIN disciplines d ON sd.discipline_id = d.id
            JOIN subjects subj ON d.subject_id = subj.id
            JOIN debt_types dt ON sd.debt_type_id = dt.id
            WHERE sd.deleted_at IS NULL
            ORDER BY s.id_student
        """) as cur:
            debts = await cur.fetchall()
    
    if not debts:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    debts_list = []
    for d in debts:
        debts_list.append(f"{d[0]},{d[1]},{d[2]}: {d[3]} - {d[4]} ({d[5]}) –¥–æ {d[6]} ")
    
    await safe_send_message(
        message,
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ 3 ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é - id —Å—Ç—É–¥–µ–Ω—Ç–∞, id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, id —Ç–∏–ø –¥–æ–ª–≥–∞):\n" +
        "\n".join(debts_list),
        parse_mode=None
    )
    await state.set_state(DebtFSM.wait_edit_id)

@router.message(DebtFSM.wait_edit_id)
async def debt_edit_choose(message: Message, state: FSMContext):
    try:
        student_id, discipline_id, debt_type_id = map(int, message.text.strip().split(','))
    except ValueError:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ 3 ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é - id —Å—Ç—É–¥–µ–Ω—Ç–∞, id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, id —Ç–∏–ø –¥–æ–ª–≥–∞: ")
        return
    
    await state.update_data(
        student_id=student_id,
        discipline_id=discipline_id,
        debt_type_id=debt_type_id
    )
    
    await message.answer(
        "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        "1.üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n"
        "2.‚ÑπÔ∏è–¢–∏–ø –¥–æ–ª–≥–∞\n"
        "3.‚è≥–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫\n"
        "üìù–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞:"
    )
    await state.set_state(DebtFSM.wait_edit_field)

@router.message(DebtFSM.wait_edit_field)
async def debt_edit_field(message: Message, state: FSMContext):
    field_map = {
        "1": "discipline",
        "2": "type",
        "3": "date"
    }
    
    choice = message.text.strip()
    if choice not in field_map:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3")
        return
    
    field = field_map[choice]
    await state.update_data(edit_field=field)
    
    data = await state.get_data()
    
    if field == "discipline":
        async with db.get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
            async with conn.execute("""
                SELECT d.id, s.name, t.full_name
                FROM disciplines d
                JOIN subjects s ON d.subject_id = s.id
                JOIN teachers t ON d.teacher_id = t.id
                WHERE d.id = ? 
            """, (data["discipline_id"],)) as cur:
                current = await cur.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
            async with conn.execute("""
                SELECT d.id, s.name, t.full_name
                FROM disciplines d
                JOIN subjects s ON d.subject_id = s.id
                JOIN teachers t ON d.teacher_id = t.id
            """) as cur:
                disciplines = await cur.fetchall()
        
        disciplines_list = "\n".join([f"{d[0]}: {d[1]} ({d[2]})" for d in disciplines])
        await safe_send_message(
            message,
            f"üìö –¢–µ–∫—É—â–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {current[1]} ({current[2]})\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É (ID):\n" + disciplines_list,
            parse_mode=None
        )
        await state.set_state(DebtFSM.wait_edit_value)
    
    elif field == "type":
        async with db.get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –¥–æ–ª–≥–∞
            async with conn.execute("""
                SELECT dt.id, dt.name
                FROM debt_types dt
                WHERE dt.id = ?
            """, (data["debt_type_id"],)) as cur:
                current = await cur.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–æ–ª–≥–æ–≤
            async with conn.execute("SELECT id, name FROM debt_types") as cur:
                types = await cur.fetchall()
        
        types_list = "\n".join([f"{t[0]}: {t[1]}" for t in types])
        await safe_send_message(
            message,
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Ç–∏–ø: {current[1]}\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø (ID):\n" + types_list,
            parse_mode=None
        )
        await state.set_state(DebtFSM.wait_edit_value)
    
    elif field == "date":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        async with db.get_connection() as conn:
            async with conn.execute("""
                SELECT last_date FROM student_debts
                WHERE student_id = ? AND discipline_id = ? AND debt_type_id = ?
            """, (data["student_id"], data["discipline_id"], data["debt_type_id"])) as cur:
                current_date = await cur.fetchone()
        
        await message.answer(
            f"‚è≥ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date[0]}\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):"
        )
        await state.set_state(DebtFSM.wait_edit_value)

@router.message(DebtFSM.wait_edit_value)
async def debt_edit_save(message: Message, state: FSMContext):
    data = await state.get_data()
    value = message.text.strip()
    
    try:
        async with db.get_connection() as conn:
            if data["edit_field"] == "discipline":
                await conn.execute("""
                    UPDATE student_debts 
                    SET discipline_id = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE student_id = ? AND discipline_id = ? AND debt_type_id = ? AND deleted_at IS NULL
                """, (int(value), data["student_id"], data["discipline_id"], data["debt_type_id"]))
                    
            elif data["edit_field"] == "type":
                await conn.execute("""
                    UPDATE student_debts 
                    SET debt_type_id = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE student_id = ? AND discipline_id = ? AND debt_type_id = ? AND deleted_at IS NULL
                """, (int(value), data["student_id"], data["discipline_id"], data["debt_type_id"]))
                
            elif data["edit_field"] == "date":
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    datetime.strptime(value, "%Y-%m-%d")
                except ValueError:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
                    return
                
                await conn.execute("""
                    UPDATE student_debts 
                    SET last_date = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE student_id = ? AND discipline_id = ? AND debt_type_id = ? AND deleted_at IS NULL
                """, (value, data["student_id"], data["discipline_id"], data["debt_type_id"]))

            
            await conn.commit()
        await message.answer("‚úÖ –î–æ–ª–≥ –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=kb.debts_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    await state.set_state(DebtFSM.choose_action)

@router.message(DebtFSM.choose_action, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥")
async def debt_delete_start(message: Message, state: FSMContext):
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, d.id, dt.id, s.login, subj.name, dt.name, sd.last_date
            FROM student_debts sd
            JOIN students s ON sd.student_id = s.id_student
            JOIN disciplines d ON sd.discipline_id = d.id
            JOIN subjects subj ON d.subject_id = subj.id
            JOIN debt_types dt ON sd.debt_type_id = dt.id
            WHERE deleted_at IS NULL
            ORDER BY s.id_student
        """) as cur:
            debts = await cur.fetchall()
    
    if not debts:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    debts_list = []
    for d in debts:
        debts_list.append(f"{d[0]},{d[1]},{d[2]}: {d[3]} - {d[4]} ({d[5]}) –¥–æ {d[6]}")
    
    await safe_send_message(
        message,
        "üìù –í–≤–µ–¥–∏—Ç–µ 3 ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é - id —Å—Ç—É–¥–µ–Ω—Ç–∞, id –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, id —Ç–∏–ø –¥–æ–ª–≥–∞: \n" +
        "\n".join(debts_list),
        parse_mode=None
    )
    await state.set_state(DebtFSM.wait_del)

@router.message(DebtFSM.wait_del)
async def debt_delete(message: Message, state: FSMContext):
    if message.text == "/cancel":
        await cancel_command(message, state)
        return
        
    txt = message.text.strip().split(",")
    if len(txt) < 3:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        return
        
    try:
        student_id, discipline_id, debt_type_id = [int(x.strip()) for x in txt[:3]]
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        return
        
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                UPDATE student_debts 
                SET deleted_at = CURRENT_TIMESTAMP,  
                    updated_at = CURRENT_TIMESTAMP
                WHERE student_id=? AND discipline_id=? AND debt_type_id=? AND deleted_at IS NULL
            """, (student_id, discipline_id, debt_type_id))
            await conn.commit()
        await message.answer("üóëÔ∏è –î–æ–ª–≥ —É–¥–∞–ª–µ–Ω", reply_markup=kb.debts_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    await state.set_state(DebtFSM.choose_action)

# ==================== –°–ü–†–ê–í–ö–ê ====================
@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AuthStates.admin_mode.state:
        help_text = (
            "üõ† <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>:\n\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤\n"
            "‚è≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n"
            "üîó /unbind - –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üö™ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "üóëÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î\n"
            "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    else:
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n\n"
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "üì∞ –ù–æ–≤–æ—Å—Ç–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üìù –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–ª–≥–æ–≤\n"
            "üìä –¢–µ—Å—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤\n\n"
            "‚úÖ /start - –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "üîó /unbind - –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üö™ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("clear"), AuthStates.admin_mode)
async def clear_command(message: Message):
    if await cleanup_deleted_records():
        await message.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

@router.message(StateFilter(any_state), F.text)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def handle_unknown_command(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None –∏–ª–∏ admin_mode/user_mode (–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    if current_state is None or current_state in [AuthStates.admin_mode.state, AuthStates.user_mode.state]:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

@router.message(StateFilter(any_state), F.text)
async def handle_unknown_input(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state is None or current_state in [AuthStates.admin_mode.state, AuthStates.user_mode.state]:
        if message.text.startswith('/'):
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")