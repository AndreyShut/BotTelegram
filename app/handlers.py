from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.fsm.context import FSMContext
import logging
import app.keyboards as kb
from app.db_manager import db
from dotenv import load_dotenv
import os
from typing import Optional, Tuple, List

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)
MAX_LOGIN_ATTEMPTS = 3

class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    authorized = State()
    admin_mode = State()
    add_news_title = State()
    add_news_description = State()
    add_news_date = State()
    add_news_place = State()
    add_news_groups = State()
    delete_news = State()
    publish_news = State()
    unbind_user_select = State()
    unbind_all_confirm = State()
    add_student = State()
    edit_student = State()
    delete_student = State()

class StudentRegisterState(StatesGroup):
    waiting_login = State()
    waiting_password = State()
    waiting_group = State()
    waiting_description = State()
add_states = StudentRegisterState

class AddTestStates(StatesGroup):
    waiting_group = State()
    waiting_subject = State()
    waiting_teacher = State()
    waiting_link = State()
    waiting_date = State()
add_test = AddTestStates

class EditStudentFSM(StatesGroup):
    waiting_id = State()
    main_menu = State()
    waiting_field = State()
    editing_login = State()
    editing_password = State()
    editing_group = State()
    editing_status = State()
    editing_description = State()
    confirm = State()
edit_st = EditStudentFSM

class SubjectFSM(StatesGroup):
    choose_action = State()
    wait_name = State()
    wait_id = State()
    wait_edit_new_name = State()

class TeacherFSM(StatesGroup):
    choose_action = State()
    wait_name = State()
    wait_id = State()
    wait_edit_new_name = State()

class DebtFSM(StatesGroup):
    choose_action = State()
    wait_student = State()
    wait_add_disc = State()
    wait_add_type = State()
    wait_add_date = State()
    wait_del = State()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
async def get_student_by_login(login: str) -> Optional[Tuple]:
    """–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É"""
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login, password, telegram_id, is_active FROM students WHERE login = ?",
                (login,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Error in get_student_by_login: {e}")
        return None

async def update_telegram_for_student(id_student: int, telegram_id: int) -> bool:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            try:
                await conn.execute(
                    "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                    (telegram_id,))
                await conn.execute(
                    "UPDATE students SET telegram_id = ?, is_active = 1 WHERE id_student = ?",
                    (telegram_id, id_student))
                await conn.commit()
                return True
            except Exception as e:
                await conn.rollback()
                logger.error(f"Transaction failed: {e}")
                return False
    except Exception as e:
        logger.error(f"Database error: {e}")
        return False

async def get_student_by_telegram(telegram_id: int) -> Optional[Tuple]:
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login, is_active FROM students WHERE telegram_id = ?", 
                (telegram_id,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Database error in get_student_by_telegram: {e}")
        return None

async def remove_telegram_binding(telegram_id: int) -> bool:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            await conn.execute(
                "DELETE FROM sent_notifications WHERE user_id = ?",
                (telegram_id,))
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                (telegram_id,))
            await conn.commit()
            return True
    except Exception as e:
        logger.error(f"Error in remove_telegram_binding: {e}")
        if conn:
            await conn.rollback()
        return False

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT telegram_id FROM students WHERE login = ? AND telegram_id = ?",
                (os.getenv("ADMIN_LOGIN"), telegram_id)
            ) as cur:
                return await cur.fetchone() is not None
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

# ==================== –ö–û–ú–ê–ù–î–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ====================
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    student = await get_student_by_telegram(message.from_user.id)
    if student:
        if await is_admin(message.from_user.id):
            await message.answer("üîê –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
        else:
            await message.answer("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é", reply_markup=kb.main)
            await state.set_state(AuthStates.authorized)
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_for_login)

@router.message(AuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    await state.update_data(login=login)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
    await state.set_state(AuthStates.waiting_for_password)

@router.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    login = data.get("login")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if login == os.getenv("ADMIN_LOGIN") and password == os.getenv("ADMIN_PASSWORD"):
        await state.update_data(is_admin=True)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                (message.from_user.id,))
            await conn.execute(
                "UPDATE students SET telegram_id = ? WHERE login = ?",
                (message.from_user.id, login))
            await conn.commit()
        
        await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
        return

    student = await get_student_by_login(login)
    if student and await db.verify_password(str(student[2]), password):
        if not student[4]:  # is_active
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return
            
        if await get_student_by_telegram(message.from_user.id):
            await message.answer('–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é. –î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unbind')
            await state.clear()
            return
            
        if await update_telegram_for_student(student[0], message.from_user.id):
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=kb.main)
            await state.set_state(AuthStates.authorized)
            await state.update_data(is_admin=False)
        else:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            await state.clear()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–õ–æ–≥–∏–Ω:')
        await state.set_state(AuthStates.waiting_for_login)

@router.message(Command("unbind"))
async def unbind(message: Message, state: FSMContext):
    if await remove_telegram_binding(message.from_user.id):
        await message.answer("‚úÖ –í–∞—à Telegram –±—ã–ª –æ—Ç–≤—è–∑–∞–Ω. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()
    else:
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏–±–æ –±—ã–ª —É–∂–µ –æ—Ç–≤—è–∑–∞–Ω.")

@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", reply_markup=types.ReplyKeyboardRemove())

# ==================== –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´ ====================
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def back_to_admin_menu(message: Message, state: FSMContext):
    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)

@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_root_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

# ==================== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
from aiogram.types import FSInputFile

@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb.schedule_menu)

@router.message(F.text == "üë• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
async def show_group_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–≥—Ä—É–ø–ø.xlsx"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="üë• –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
    else:
        await message.answer("–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def show_teacher_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.xls"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="üë®‚Äçüè´ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚è≥ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
async def show_debts_schedule(message: Message):
    file_path = "–ì—Ä–∞—Ñ–∏–∫_–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.xlsx"
    if os.path.exists(file_path):
        await message.answer_document(FSInputFile(file_path), caption="‚è≥ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
    else:
        await message.answer("–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìù –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏")
async def show_debts(message: Message):
    student = await get_student_by_telegram(message.from_user.id)
    if not student:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start", reply_markup=kb.main)
        return

    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT subj.name, dt.name, sd.last_date
                FROM student_debts sd
                JOIN disciplines d ON sd.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN debt_types dt ON sd.debt_type_id = dt.id
                WHERE sd.student_id = ?
                ORDER BY sd.last_date
            ''', (student[0],)) as cursor:
                debts = await cursor.fetchall()

        if not debts:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π! üéâ")
            return

        response = "üìù –í–∞—à–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏:\n\n"
        for subj_name, debt_type, last_date in debts:
            response += (
                f"üìö {subj_name}\n"
                f"üî¥ {debt_type}\n"
                f"‚è≥ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {last_date}\n"
                "----------\n"
            )
        await message.answer(response)
    except Exception as e:
        logger.error(f"Error fetching debts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö.")

@router.message(F.text == "üìä –¢–µ—Å—Ç—ã")
async def show_tests(message: Message):
    student = await get_student_by_telegram(message.from_user.id)
    if not student:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start", reply_markup=kb.main)
        return

    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT t.date, subj.name, tch.full_name, t.test_link
                FROM tests t
                JOIN disciplines d ON t.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN teachers tch ON d.teacher_id = tch.id
                WHERE t.group_id = (SELECT id_group FROM students WHERE id_student = ?)
                ORDER BY t.date ASC
                LIMIT 10
            ''', (student[0],)) as cursor:
                tests = await cursor.fetchall()

        if not tests:
            await message.answer("–£ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤.")
            return

        response = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Ç–µ—Å—Ç—ã –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:\n\n"
        for date, subj, teacher, test_link in tests:
            response += (
                f"üìÖ {date}\n"
                f"üìö {subj}\n"
                f"üë®‚Äçüè´ {teacher}\n"
                f"üîó <a href=\"{test_link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç</a>\n"
                "----------\n"
            )
        await message.answer(response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error fetching tests: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: Message):
    try:
        student = await get_student_by_telegram(message.from_user.id)
        if not student:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT n.id, n.title, n.description, n.date, n.place 
                FROM news n
                LEFT JOIN news_groups ng ON n.id = ng.news_id
                WHERE n.is_published = 1
                AND (n.for_all_groups = 1 OR ng.group_id = (
                    SELECT id_group FROM students WHERE id_student = ?
                ))
                ORDER BY n.date DESC
                LIMIT 10
            ''', (student[0],)) as cursor:
                news_items = await cursor.fetchall()

            if not news_items:
                await message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            for news in news_items:
                news_id, title, description, date, place = news
                response += (
                    f"üìå <b>{title}</b>\n"
                    f"üìÖ {date}\n"
                )
                if place:
                    response += f"üìç {place}\n"
                response += f"\n{description}\n\n"
                response += "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n\n"

            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error fetching news: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–µ—Å—Ç–∞–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏")
async def manage_tests(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏?\n"
        "/add_test ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç\n"
        "/list_tests ‚Äì —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤\n"
        "/delete_test ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ ID", 
        reply_markup=kb.admin_kb
    )

@router.message(Command("add_test"))
async def test_add_start(message: Message, state: FSMContext):
    # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name_group FROM groups ORDER BY name_group") as cursor:
            groups = await cursor.fetchall()
    if not groups:
        await message.answer("–ì—Ä—É–ø–ø—ã –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.")
        return
    await state.update_data(groups=groups)
    group_list = '\n'.join([f"{g[0]}: {g[1]}" for g in groups])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–∞:\n{group_list}")
    await state.set_state(add_test.waiting_group)

@router.message(add_test.waiting_group)
async def test_add_group(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã")
        return
    await state.update_data(group_id=group_id)
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT s.id, s.name
            FROM disciplines d
            JOIN subjects s ON d.subject_id = s.id
            WHERE d.group_id = ?
            GROUP BY s.id
            ORDER BY s.name
        ''', (group_id,)) as cursor:
            subjects = await cursor.fetchall()
    if not subjects:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –≥—Ä—É–ø–ø—ã!")
        await state.set_state(AuthStates.admin_mode)
        return
    subject_list = '\n'.join([f"{sid}: {sname}" for sid, sname in subjects])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞:\n{subject_list}")
    await state.set_state(add_test.waiting_subject)

@router.message(add_test.waiting_subject)
async def test_add_subject(message: Message, state: FSMContext):
    try: subject_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–µ–¥–º–µ—Ç–∞")
        return

    await state.update_data(subject_id=subject_id)
    group_id = (await state.get_data())["group_id"]
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT t.id, t.full_name
            FROM disciplines d
            JOIN teachers t ON d.teacher_id = t.id
            WHERE d.group_id = ? AND d.subject_id = ?
            GROUP BY t.id
            ORDER BY t.full_name
        ''', (group_id, subject_id)) as cursor:
            teachers = await cursor.fetchall()
    if not teachers:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞/–≥—Ä—É–ø–ø—ã!")
        await state.set_state(AuthStates.admin_mode)
        return
    teachers_str = '\n'.join([f"{tid}: {tname}" for tid, tname in teachers])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n{teachers_str}")
    await state.set_state(add_test.waiting_teacher)

@router.message(add_test.waiting_teacher)
async def test_add_teacher(message: Message, state: FSMContext):
    try: teacher_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    await state.update_data(teacher_id=teacher_id)
    await message.answer("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç:")
    await state.set_state(add_test.waiting_link)

@router.message(add_test.waiting_link)
async def test_add_link(message: Message, state: FSMContext):
    link = message.text.strip()
    await state.update_data(test_link=link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Å—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(add_test.waiting_date)

@router.message(add_test.waiting_date)
async def test_add_date(message: Message, state: FSMContext):
    date = message.text.strip()
    data = await state.get_data()
    # –¢—É—Ç –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å discipline_id
    async with db.get_connection() as conn:
        async with conn.execute('''
            SELECT id FROM disciplines 
            WHERE subject_id = ? AND teacher_id = ? AND group_id = ?
        ''', (data["subject_id"], data["teacher_id"], data["group_id"])) as cursor:
            discipline = await cursor.fetchone()
    if not discipline:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π.")
        await state.set_state(AuthStates.admin_mode)
        return
    try:
        async with db.get_connection() as conn:
            await conn.execute('''
                INSERT INTO tests (group_id, discipline_id, test_link, date)
                VALUES (?, ?, ?, ?)
            ''', (data["group_id"], discipline[0], data["test_link"], date))
            await conn.commit()
        await message.answer("‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç.")
    await state.set_state(AuthStates.admin_mode)

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–°–¢–Ø–ú–ò ====================
@router.message(AuthStates.admin_mode, F.text == "üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏")
async def manage_news(message: Message):
    await message.answer("üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=kb.news_admin_kb)

@router.message(AuthStates.admin_mode, F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def add_news_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.add_news_title)

@router.message(AuthStates.add_news_title)
async def add_news_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.add_news_description)

@router.message(AuthStates.add_news_description)
async def add_news_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.add_news_date)

@router.message(AuthStates.add_news_date)
async def add_news_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.add_news_place)

@router.message(AuthStates.add_news_place, Command("skip"))
async def skip_news_place(message: Message, state: FSMContext):
    await state.update_data(place=None)
    await message.answer("–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–¥–∞/–Ω–µ—Ç) (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
    await state.set_state(AuthStates.add_news_groups)

@router.message(AuthStates.add_news_place)
async def add_news_place(message: Message, state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer("–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø? (–¥–∞/–Ω–µ—Ç) (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
    await state.set_state(AuthStates.add_news_groups)

@router.message(AuthStates.add_news_groups)
async def add_news_groups(message: Message, state: FSMContext):
    data = await state.get_data()
    for_all = message.text.lower() == "–¥–∞"
    try:
        async with db.get_connection() as conn:
            cursor = await conn.execute(
                '''INSERT INTO news (title, description, date, place, for_all_groups) 
                   VALUES (?, ?, ?, ?, ?)''',
                (data['title'], data['description'], data['date'], data.get('place'), int(for_all)))
            news_id = cursor.lastrowid

            if not for_all:
                # –ó–∞–ø—Ä–æ—Å–∏–º id –≥—Ä—É–ø–ø
                await state.update_data(news_id=news_id)
                async with conn.execute("SELECT id, name_group FROM groups") as c:
                    groups = await c.fetchall()
                gr = '\n'.join(f"{g[0]}: {g[1]}" for g in groups)
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n{gr}")
                await state.set_state("waiting_for_group_ids")
                await conn.commit()  # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                return
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: {news_id}", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except Exception as e:
        logger.error(f"Error adding news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

# –î–æ–±–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è id –≥—Ä—É–ø–ø
@router.message(State("waiting_for_group_ids"))
async def add_news_group_ids(message: Message, state: FSMContext):
    data = await state.get_data()
    news_id = data["news_id"]
    group_ids = [int(x) for x in message.text.replace(" ", "").split(",") if x.isdigit()]
    try:
        async with db.get_connection() as conn:
            await conn.executemany(
                "INSERT INTO news_groups (news_id, group_id) VALUES (?, ?)",
                [(news_id, gid) for gid in group_ids]
            )
            await conn.commit()
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≥—Ä—É–ø–ø–∞–º!", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"Error attaching news to groups: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≥—Ä—É–ø–ø.", reply_markup=kb.admin_kb)
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def list_news(message: Message):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT id, title, date, is_published FROM news ORDER BY date DESC LIMIT 20
            ''') as cursor:
                news_list = await cursor.fetchall()
        
        if not news_list:
            await message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
            
        response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for news in news_list:
            news_id, title, date, is_published = news
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if is_published else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
            response += f"üìå <b>{title}</b>\nüìÖ {date}\n{status}\nID: {news_id}\n\n"
        
        await message.answer(response, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"Error fetching news list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.")

@router.message(AuthStates.admin_mode, F.text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def publish_news_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.publish_news)

@router.message(AuthStates.publish_news)
async def publish_news_execute(message: Message, state: FSMContext):
    try:
        news_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute(
                "UPDATE news SET is_published = 1 WHERE id = ?",
                (news_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏ (—á–∏—Å–ª–æ)")
    except Exception as e:
        logger.error(f"Error publishing news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def delete_news_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.delete_news)

@router.message(AuthStates.delete_news)
async def delete_news_execute(message: Message, state: FSMContext):
    try:
        news_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM news_groups WHERE news_id = ?", (news_id,))
            await conn.execute("DELETE FROM news WHERE id = ?", (news_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏ (—á–∏—Å–ª–æ)")
    except Exception as e:
        logger.error(f"Error deleting news: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
@router.message(AuthStates.admin_mode, F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: Message, state: FSMContext):
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb.students_admin_kb)

@router.message(AuthStates.admin_mode, F.text == "üîó –û—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unbind_user_start(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT s.id_student, s.login, s.telegram_id, g.name_group 
                FROM students s
                JOIN groups g ON s.id_group = g.id
                WHERE s.telegram_id IS NOT NULL
                ORDER BY g.name_group, s.login
            ''') as cursor:
                users = await cursor.fetchall()
        
        if not users:
            await message.answer("ü§∑ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
            
        response = "üë• –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            user_id, login, tg_id, group = user
            response += f"üë§ {login} (–ì—Ä—É–ø–ø–∞: {group})\nID: {user_id} | TG: {tg_id}\n\n"
        
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏–ª–∏ /all –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –≤—Å–µ—Ö (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
        await message.answer(response)
        await state.set_state(AuthStates.unbind_user_select)
    
    except Exception as e:
        logger.error(f"Error fetching users list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(AuthStates.unbind_user_select, Command("all"))
async def unbind_all_confirm(message: Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–¥–∞/–Ω–µ—Ç) (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
    await state.set_state(AuthStates.unbind_all_confirm)

@router.message(AuthStates.unbind_all_confirm, F.text.lower() == "–¥–∞")
async def unbind_all_execute(message: Message, state: FSMContext):
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("UPDATE students SET telegram_id = NULL")
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await conn.execute("DELETE FROM sent_notifications")
            await conn.commit()
            
        await message.answer("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã!", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    except Exception as e:
        logger.error(f"Error unbinding all users: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.unbind_user_select)
async def unbind_single_user(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with conn.execute(
                "SELECT telegram_id FROM students WHERE id_student = ?",
                (user_id,)
            ) as cursor:
                tg_id = await cursor.fetchone()
                
            if not tg_id:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE id_student = ?",
                (user_id,))
            # –£–¥–∞–ª—è–µ–º –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await conn.execute(
                "DELETE FROM sent_notifications WHERE user_id = ?",
                (tg_id[0],))
            await conn.commit()
            
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ) –∏–ª–∏ /all (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
    except Exception as e:
        logger.error(f"Error unbinding user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def add_student_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(add_states.waiting_login)

@router.message(add_states.waiting_login)
async def add_student_login(message: Message, state: FSMContext):
    login = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
    async with db.get_connection() as conn:
        async with conn.execute("SELECT 1 FROM students WHERE login = ?", (login,)) as cur:
            exists = await cur.fetchone()
    if exists:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
        return
    await state.update_data(login=login)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    await state.set_state(add_states.waiting_password)

@router.message(add_states.waiting_password)
async def add_student_password(message: Message, state: FSMContext):
    password = message.text.strip()
    await state.update_data(password=password)
    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name_group FROM groups ORDER BY name_group") as cursor:
            groups = await cursor.fetchall()
    group_list = "\n".join([f"{gid}: {gname}" for gid, gname in groups])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{group_list}")
    await state.set_state(add_states.waiting_group)

@router.message(add_states.waiting_group)
async def add_student_group(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
        async with db.get_connection() as conn:
            async with conn.execute("SELECT name_group FROM groups WHERE id = ?", (group_id,)) as cur:
                group = await cur.fetchone()
        if not group:
            await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã.")
        return

    await state.update_data(group_id=group_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ/–§–ò–û –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(add_states.waiting_description)

@router.message(add_states.waiting_description, Command("skip"))
async def add_student_skip_desc(message: Message, state: FSMContext):
    await state.update_data(description=None)
    await finish_student_add(message, state)

@router.message(add_states.waiting_description)
async def add_student_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await finish_student_add(message, state)

async def finish_student_add(message: Message, state: FSMContext):
    data = await state.get_data()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
    try:
        password = await db.hash_password(data["password"])
        async with db.get_connection() as conn:
            await conn.execute('''
                INSERT INTO students (login, password, id_group, description) 
                VALUES (?, ?, ?, ?)
            ''', (data["login"], password, data["group_id"], data.get("description")))
            await conn.commit()
        await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {data['login']} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å–º. –ª–æ–≥).")
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def list_students(message: Message):
    try:
        async with db.get_connection() as conn:
            async with conn.execute('''
                SELECT s.id_student, s.login, s.telegram_id, g.name_group, s.is_active 
                FROM students s
                JOIN groups g ON s.id_group = g.id
                ORDER BY g.name_group, s.login
            ''') as cursor:
                students = await cursor.fetchall()
        
        if not students:
            await message.answer("ü§∑ –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ.")
            return
            
        response = "üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students:
            student_id, login, tg_id, group, is_active = student
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            tg_status = f"TG: {tg_id}" if tg_id else "TG: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            response += f"üë§ {login} (–ì—Ä—É–ø–ø–∞: {group})\nID: {student_id} | {tg_status} | {status}\n\n"
        
        await message.answer(response)
    
    except Exception as e:
        logger.error(f"Error fetching students list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")

@router.message(AuthStates.admin_mode, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def edit_student_start(message: Message, state: FSMContext):
    # —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, s.login, g.name_group, s.is_active
            FROM students s
            JOIN groups g ON s.id_group = g.id
            ORDER BY s.id_student
        """) as cur:
            students = await cur.fetchall()
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    msg += "\n".join([f"{s[0]}: {s[1]} ({s[2]}) [{('–ê–∫—Ç–∏–≤–µ–Ω' if s[3] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')}]" for s in students])
    await message.answer(msg)
    await state.set_state(edit_st.waiting_id)

@router.message(edit_st.waiting_id)
async def edit_student_select(message: Message, state: FSMContext):
    try:
        student_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞!")
        return

    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT s.id_student, s.login, s.password, g.name_group, s.is_active, s.description, s.id_group
            FROM students s
            JOIN groups g ON s.id_group = g.id
            WHERE s.id_student = ?
        """, (student_id,)) as cur:
            student = await cur.fetchone()
    if not student:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(AuthStates.admin_mode)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É –≤ FSM
    await state.update_data(
        id_student=student[0], login=student[1], password=student[2], group_name=student[3],
        is_active=student[4], description=student[5] or "", id_group=student[6]
    )
    msg = (
        f"–í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç:\n"
        f"<b>–õ–æ–≥–∏–Ω:</b> {student[1]}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {student[3]}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {student[5] or '–ù–µ—Ç'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if student[4] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        f"–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    await message.answer(msg, reply_markup=kb.edit_student_kb, parse_mode="HTML")
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.main_menu)
async def edit_student_options(message: Message, state: FSMContext):
    text = message.text.lower()
    edit_map = {
        "–ª–æ–≥–∏–Ω": edit_st.editing_login,
        "–ø–∞—Ä–æ–ª—å": edit_st.editing_password,
        "–≥—Ä—É–ø–ø–∞": edit_st.editing_group,
        "—Å—Ç–∞—Ç—É—Å": edit_st.editing_status,
        "–æ–ø–∏—Å–∞–Ω–∏–µ": edit_st.editing_description,
        "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å": edit_st.confirm
    }
    # –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é
    if "–æ—Ç–º–µ–Ω–∞" in text or "–Ω–∞–∑–∞–¥" in text:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
        return
    for k, v in edit_map.items():
        if k in text:
            await state.set_state(v)
            if v == edit_st.editing_login:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:")
            elif v == edit_st.editing_password:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
            elif v == edit_st.editing_group:
                async with db.get_connection() as conn:
                    async with conn.execute("SELECT id,name_group FROM groups") as cur:
                        groups = await cur.fetchall()
                gr = '\n'.join(f"{gid}:{gname}" for gid, gname in groups)
                await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã:\n{gr}")
            elif v == edit_st.editing_status:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (1 –¥–ª—è –∞–∫—Ç–∏–≤–µ–Ω, 0 –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω):")
            elif v == edit_st.editing_description:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            elif v == edit_st.confirm:
                await edit_student_save(message, state)
            return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.", reply_markup=kb.edit_student_kb)

@router.message(edit_st.editing_login)
async def edit_student_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text.strip())
    await message.answer("–õ–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω. –î–∞–ª—å—à–µ?", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_password)
async def edit_student_password(message: Message, state: FSMContext):
    password = await db.hash_password(message.text.strip())
    await state.update_data(password=password)
    await message.answer("–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω. –î–∞–ª—å—à–µ?", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_group)
async def edit_student_group(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        async with db.get_connection() as conn:
            async with conn.execute("SELECT name_group FROM groups WHERE id = ?", (group_id,)) as cur:
                group = await cur.fetchone()
        if not group:
            await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ ID –µ—â—ë —Ä–∞–∑.")
            return
    except ValueError:
        await message.answer("ID –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(id_group=group_id, group_name=group[0])
    await message.answer("–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –î–∞–ª—å—à–µ?", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_status)
async def edit_student_status(message: Message, state: FSMContext):
    text = message.text.strip()
    if text not in ["0", "1"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ 0 (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω) –∏–ª–∏ 1 (–∞–∫—Ç–∏–≤–µ–Ω).")
        return
    is_active = int(text)
    await state.update_data(is_active=is_active)
    await message.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω. –î–∞–ª—å—à–µ?", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.editing_description)
async def edit_student_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ. –î–∞–ª—å—à–µ?", reply_markup=kb.edit_student_kb)
    await state.set_state(edit_st.main_menu)

@router.message(edit_st.confirm)
async def edit_student_save(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                UPDATE students SET login = ?, password = ?, id_group = ?, is_active = ?, description = ?
                WHERE id_student = ?
            """, (
                data["login"], data["password"], data["id_group"], data["is_active"], data["description"], data["id_student"]
            ))
            await conn.commit()
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω—ã.", reply_markup=kb.admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    await state.set_state(AuthStates.admin_mode)

@router.message(AuthStates.admin_mode, F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def delete_student_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AuthStates.delete_student)

@router.message(AuthStates.delete_student)
async def delete_student_process(message: Message, state: FSMContext):
    try:
        student_id = int(message.text)
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM students WHERE id_student = ?", (student_id,))
            await conn.commit()
            await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É–¥–∞–ª–µ–Ω!", reply_markup=kb.admin_kb)
            await state.set_state(AuthStates.admin_mode)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞ (—á–∏—Å–ª–æ)")
    except Exception as e:
        logger.error(f"Error deleting student: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
async def manage_subjects(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏?",
        reply_markup=kb.subjects_admin_kb
    )
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.choose_action)
async def subject_action(message: Message, state: FSMContext):
    txt = message.text.lower()
    if "–¥–æ–±–∞–≤–∏—Ç—å" in txt:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        await state.set_state(SubjectFSM.wait_name)
    elif "—Å–ø–∏—Å–æ–∫" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer(
            "üìö –ü—Ä–µ–¥–º–µ—Ç—ã:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs]),
            reply_markup=kb.subjects_admin_kb
        )
    elif "—É–¥–∞–ª–∏—Ç—å" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs])
        )
        await state.set_state(SubjectFSM.wait_id)
    elif "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, name FROM subjects ORDER BY name") as cur:
                subs = await cur.fetchall()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in subs])
        )
        await state.set_state(SubjectFSM.wait_id)
    elif "–Ω–∞–∑–∞–¥" in txt:
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.", reply_markup=kb.subjects_admin_kb)

@router.message(SubjectFSM.wait_name)
async def subject_add(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        async with db.get_connection() as conn:
            await conn.execute("INSERT INTO subjects (name) VALUES (?)", (name,))
            await conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç \"{name}\" –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.wait_id)
async def subject_edit_delete(message: Message, state: FSMContext):
    try:
        subj_id = int(message.text.strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    txt = (await state.get_state())
    if txt.endswith("wait_id"):
        # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id
        await state.update_data(subj_id=subj_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ /del –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(SubjectFSM.wait_edit_new_name)

@router.message(SubjectFSM.wait_edit_new_name, Command("del"))
async def subject_del(message: Message, state: FSMContext):
    subj_id = (await state.get_data()).get("subj_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM subjects WHERE id = ?", (subj_id,))
            await conn.commit()
        await message.answer("üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω.", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
    await state.set_state(SubjectFSM.choose_action)

@router.message(SubjectFSM.wait_edit_new_name)
async def subject_edit_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    subj_id = (await state.get_data()).get("subj_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("UPDATE subjects SET name = ? WHERE id = ?", (new_name, subj_id))
            await conn.commit()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.subjects_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å.")
    await state.set_state(SubjectFSM.choose_action)

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ ====================

@router.message(AuthStates.admin_mode, F.text == "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_teachers(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏?",
        reply_markup=kb.teachers_admin_kb
    )
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.choose_action)
async def teacher_action(message: Message, state: FSMContext):
    txt = message.text.lower()
    if "–¥–æ–±–∞–≤–∏—Ç—å" in txt:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        await state.set_state(TeacherFSM.wait_name)
    elif "—Å–ø–∏—Å–æ–∫" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, full_name FROM teachers ORDER BY full_name") as cur:
                ts = await cur.fetchall()
        await message.answer(
            "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in ts]),
            reply_markup=kb.teachers_admin_kb
        )
    elif "—É–¥–∞–ª–∏—Ç—å" in txt or "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id, full_name FROM teachers ORDER BY full_name") as cur:
                ts = await cur.fetchall()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n" +
            "\n".join([f"{x[0]}: {x[1]}" for x in ts])
        )
        await state.set_state(TeacherFSM.wait_id)
    elif "–Ω–∞–∑–∞–¥" in txt:
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.", reply_markup=kb.teachers_admin_kb)

@router.message(TeacherFSM.wait_name)
async def teacher_add(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        async with db.get_connection() as conn:
            await conn.execute("INSERT INTO teachers (full_name) VALUES (?)", (name,))
            await conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å \"{name}\" –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=kb.teachers_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.wait_id)
async def teacher_edit_delete(message: Message, state: FSMContext):
    try:
        teacher_id = int(message.text.strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(teacher_id=teacher_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /del –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@router.message(TeacherFSM.wait_id, Command("del"))
async def teacher_del(message: Message, state: FSMContext):
    teacher_id = (await state.get_data()).get("teacher_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("DELETE FROM teachers WHERE id = ?", (teacher_id,))
            await conn.commit()
        await message.answer("üóëÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.", reply_markup=kb.teachers_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
    await state.set_state(TeacherFSM.choose_action)

@router.message(TeacherFSM.wait_id)
async def teacher_edit_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    teacher_id = (await state.get_data()).get("teacher_id")
    try:
        async with db.get_connection() as conn:
            await conn.execute("UPDATE teachers SET full_name = ? WHERE id = ?", (new_name, teacher_id))
            await conn.commit()
        await message.answer("‚úÖ –ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.teachers_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å.")
    await state.set_state(TeacherFSM.choose_action)

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏ ====================


@router.message(AuthStates.admin_mode, F.text == "‚è≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏")
async def manage_debts(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –¥–æ–ª–≥–∞–º–∏?",
        reply_markup=kb.debts_admin_kb
    )
    await state.set_state(DebtFSM.choose_action)

@router.message(DebtFSM.choose_action)
async def debt_action(message: Message, state: FSMContext):
    txt = message.text.lower()
    if "—Å–ø–∏—Å–æ–∫" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("""
                SELECT s.id_student, s.login, subj.name, dt.name, sd.last_date
                FROM student_debts sd
                JOIN students s ON sd.student_id = s.id_student
                JOIN disciplines d ON sd.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN debt_types dt ON sd.debt_type_id = dt.id
                ORDER BY s.id_student
            """) as cur:
                debts = await cur.fetchall()
        msg = "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        for st in debts:
            msg += f"{st[0]}: {st[1]} –ø–æ {st[2]} ({st[3]}) - –¥–æ {st[4]}\n"
        await message.answer(msg)
    elif "–¥–æ–±–∞–≤–∏—Ç—å" in txt:
        # –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
        async with db.get_connection() as conn:
            async with conn.execute("SELECT id_student, login FROM students ORDER BY login") as cur:
                studs = await cur.fetchall()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞:\n" + "\n".join([f"{s[0]}: {s[1]}" for s in studs]))
        await state.set_state(DebtFSM.wait_student)
    elif "—É–¥–∞–ª–∏—Ç—å" in txt:
        async with db.get_connection() as conn:
            async with conn.execute("""
                SELECT s.id_student, s.login, subj.name, dt.name, sd.last_date
                FROM student_debts sd
                JOIN students s ON sd.student_id = s.id_student
                JOIN disciplines d ON sd.discipline_id = d.id
                JOIN subjects subj ON d.subject_id = subj.id
                JOIN debt_types dt ON sd.debt_type_id = dt.id
                ORDER BY s.id_student
            """) as cur:
                debts = await cur.fetchall()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞/–ø—Ä–µ–¥–º–µ—Ç–∞/—Ç–∏–ø–∞ –¥–æ–ª–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (id_student, discipline_id, debt_type_id) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" +
            "\n".join([f"{x[0]}|{x[2]}|{x[3]}" for x in debts])
        )
        await state.set_state(DebtFSM.wait_del)
    elif "–Ω–∞–∑–∞–¥" in txt:
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.", reply_markup=kb.debts_admin_kb)

@router.message(DebtFSM.wait_student)
async def debt_choose_student(message: Message, state: FSMContext):
    try:
        student_id = int(message.text.strip())
    except ValueError:
        await message.answer("–¢–æ–ª—å–∫–æ ID —á–∏—Å–ª–∞")
        return
    await state.update_data(student_id=student_id)
    # –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with db.get_connection() as conn:
        async with conn.execute("""
            SELECT d.id, s.name, t.full_name
            FROM disciplines d
            JOIN subjects s ON d.subject_id = s.id
            JOIN teachers t ON d.teacher_id = t.id
            JOIN students st ON st.id_group = d.group_id
            WHERE st.id_student = ?
        """, (student_id,)) as cur:
            discs = await cur.fetchall()
    if not discs:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        await state.set_state(DebtFSM.choose_action)
        return
    await message.answer("ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n" +
        "\n".join([f"{d[0]}: {d[1]} ({d[2]})" for d in discs])
    )
    await state.set_state(DebtFSM.wait_add_disc)

@router.message(DebtFSM.wait_add_disc)
async def debt_choose_disc(message: Message, state: FSMContext):
    try:
        discipline_id = int(message.text.strip())
    except ValueError:
        await message.answer("–¢–æ–ª—å–∫–æ ID —á–∏—Å–ª–∞")
        return
    await state.update_data(discipline_id=discipline_id)
    # –≤–∏–¥—ã –¥–æ–ª–≥–æ–≤
    async with db.get_connection() as conn:
        async with conn.execute("SELECT id, name FROM debt_types") as cur:
            types = await cur.fetchall()
    await message.answer("ID —Ç–∏–ø–∞ –¥–æ–ª–≥–∞:\n" + "\n".join([f"{t[0]}: {t[1]}" for t in types]))
    await state.set_state(DebtFSM.wait_add_type)

@router.message(DebtFSM.wait_add_type)
async def debt_choose_type(message: Message, state: FSMContext):
    try:
        debt_type_id = int(message.text.strip())
    except ValueError:
        await message.answer("ID —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
        return
    await state.update_data(debt_type_id=debt_type_id)
    await message.answer("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(DebtFSM.wait_add_date)

@router.message(DebtFSM.wait_add_date)
async def debt_choose_date(message: Message, state: FSMContext):
    date = message.text.strip()
    data = await state.get_data()
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                INSERT INTO student_debts (student_id,discipline_id,debt_type_id,last_date) VALUES (?,?,?,?)
            """, (data["student_id"], data["discipline_id"], data["debt_type_id"], date))
            await conn.commit()
        await message.answer("‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.debts_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    await state.set_state(DebtFSM.choose_action)

@router.message(DebtFSM.wait_del)
async def debt_delete(message: Message, state: FSMContext):
    txt = message.text.strip().split(",")
    if len(txt) < 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    student_id, discipline_id, debt_type_id = txt[:3]
    try:
        async with db.get_connection() as conn:
            await conn.execute("""
                DELETE FROM student_debts WHERE student_id=? AND discipline_id=? AND debt_type_id=?
            """, (student_id,discipline_id,debt_type_id))
            await conn.commit()
        await message.answer("üóëÔ∏è –î–æ–ª–≥ —É–¥–∞–ª–µ–Ω.", reply_markup=kb.debts_admin_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    await state.set_state(DebtFSM.choose_action)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ ====================
@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_kb)
        await state.set_state(AuthStates.admin_mode)
    else:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        await state.set_state(AuthStates.authorized)

# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
for state in AuthStates.__states__:
    router.message(state, Command("cancel"))(cancel_command)

# ==================== –°–ü–†–ê–í–ö–ê ====================
@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AuthStates.admin_mode:
        help_text = (
            "üõ† <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>:\n\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤\n"
            "‚è≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n"
            "üîó /unbind - –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üö™ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    else:
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n\n"
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "üì∞ –ù–æ–≤–æ—Å—Ç–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üìù –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–ª–≥–æ–≤\n"
            "üìä –¢–µ—Å—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤\n\n"
            "üîó /unbind - –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üö™ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    await message.answer(help_text, parse_mode="HTML")