from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import logging
import app.keyboards as kb
from app.db_manager import db
from dotenv import load_dotenv
import os

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)
MAX_LOGIN_ATTEMPTS = 3

class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    authorized = State()

async def get_student_by_login(login: str):
    """–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É"""
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login, password, telegram_id FROM students WHERE login = ?",
                (login,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Error in get_student_by_login: {e}")
        return None

async def update_telegram_for_student(id_student: int, telegram_id: int) -> bool:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    try:
        async with db.get_connection() as conn:
            # –Ø–≤–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await conn.execute("BEGIN")
            try:
                # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await conn.execute(
                    "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                    (telegram_id,)
                )
                
                # 2. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
                await conn.execute(
                    "UPDATE students SET telegram_id = ? WHERE id_student = ?",
                    (telegram_id, id_student)
                )
                
                await conn.commit()
                return True
            except Exception as e:
                await conn.rollback()
                logger.error(f"Transaction failed: {e}")
                return False
    except Exception as e:
        logger.error(f"Database error: {e}")
        return False

async def get_student_by_telegram(telegram_id):
    try:
        async with db.get_connection() as conn:
            async with conn.execute(
                "SELECT id_student, login FROM students WHERE telegram_id = ?", 
                (telegram_id,)
            ) as cur:
                return await cur.fetchone()
    except Exception as e:
        logger.error(f"Database error in get_student_by_telegram: {e}")
        return None

async def remove_telegram_binding(telegram_id: int) -> bool:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        async with db.get_connection() as conn:
            await conn.execute("BEGIN")
            
            # 1. –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ sent_notifications
            await conn.execute(
                "DELETE FROM sent_notifications WHERE user_id = ?",
                (telegram_id,)
            )
            
            # 2. –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram ID
            await conn.execute(
                "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                (telegram_id,)
            )
            
            await conn.commit()
            return True
            
    except Exception as e:
        logger.error(f"Error in remove_telegram_binding: {e}")
        if conn:
            await conn.rollback()
        return False

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    student = await get_student_by_telegram(message.from_user.id)
    if student:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unbind")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_for_login)

@router.message(AuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    await state.update_data(login=login)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
    await state.set_state(AuthStates.waiting_for_password)

@router.message(AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    login = data.get("login")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if login == os.getenv("ADMIN_LOGIN") and password == os.getenv("ADMIN_PASSWORD"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AuthStates.authorized)
        await state.update_data(is_admin=True)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb.main)
        return

    student = await get_student_by_login(login)
    if student and await db.verify_password(str(student[2]), password):
        if await get_student_by_telegram(message.from_user.id):
            await message.answer('–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é. –î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unbind')
            await state.clear()
            return
        try:
            async with db.get_connection() as conn:
                await conn.execute("BEGIN")
                # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await conn.execute(
                    "UPDATE students SET telegram_id = NULL WHERE telegram_id = ?",
                    (message.from_user.id,))
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É
                await conn.execute(
                    "UPDATE students SET telegram_id = ? WHERE id_student = ?",
                    (message.from_user.id, student[0]))
                await conn.commit()
                
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=kb.main)
            await state.set_state(AuthStates.authorized)
            await state.update_data(is_admin=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            await state.clear()

    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–õ–æ–≥–∏–Ω:')
        await state.set_state(AuthStates.waiting_for_login)
        await state.clear()
    return

@router.message(Command("unbind"))
async def unbind(message: Message, state: FSMContext):
    if await remove_telegram_binding(message.from_user.id):
        await message.answer("–í–∞—à Telegram –±—ã–ª –æ—Ç–≤—è–∑–∞–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()
    else:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏–±–æ –±—ã–ª —É–∂–µ –æ—Ç–≤—è–∑–∞–Ω.")

@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")

@router.message(AuthStates.authorized, F.text)
async def main_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n(–ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞.)", reply_markup=kb.main)
    else:
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb.main)


@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await get_student_by_telegram(message.from_user.id)
        if not student:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        async with db.get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤—Å–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–≥–æ –≥—Ä—É–ø–ø—ã)
            async with conn.execute('''
                SELECT n.id, n.title, n.description, n.date, n.place 
                FROM news n
                LEFT JOIN news_groups ng ON n.id = ng.news_id
                WHERE n.is_published = 1
                AND (n.for_all_groups = 1 OR ng.group_id = (
                    SELECT id_group FROM students WHERE id_student = ?
                ))
                ORDER BY n.date DESC
                LIMIT 10
            ''', (student[0],)) as cursor:
                news_items = await cursor.fetchall()

            if not news_items:
                await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            for news in news_items:
                news_id, title, description, date, place = news
                response += (
                    f"üìå <b>{title}</b>\n"
                    f"üìÖ {date}\n"
                )
                if place:
                    response += f"üìç {place}\n"
                response += f"\n{description}\n\n"
                response += "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n\n"

            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error fetching news: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")


@router.message(F.text == "üìä –¢–µ—Å—Ç—ã")
async def show_tests(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await get_student_by_telegram(message.from_user.id)
        if not student:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        async with db.get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
            async with conn.execute('''
                SELECT t.date, s.name, t.test_link, te.full_name 
                FROM tests t
                JOIN subjects s ON t.subject_id = s.id
                JOIN teachers te ON t.teacher_id = te.id
                WHERE t.group_id = (
                    SELECT id_group FROM students WHERE id_student = ?
                )
                ORDER BY t.date
            ''', (student[0],)) as cursor:
                tests = await cursor.fetchall()

            if not tests:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
                return

            response = "üìù –í–∞—à–∏ —Ç–µ—Å—Ç—ã:\n\n"
            for test in tests:
                date, subject, link, teacher = test
                response += (
                    f"üìå <b>{subject}</b>\n"
                    f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {link}\n\n"
                )

            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error fetching tests: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.")


@router.message(F.text == "üìù –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏")
async def show_debts(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await get_student_by_telegram(message.from_user.id)
        if not student:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        async with db.get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            async with conn.execute('''
                SELECT s.name, dt.name, sd.last_date 
                FROM student_debts sd
                JOIN subjects s ON sd.subject_id = s.id
                JOIN debt_types dt ON sd.debt_type_id = dt.id
                WHERE sd.student_id = ?
                ORDER BY sd.last_date
            ''', (student[0],)) as cursor:
                debts = await cursor.fetchall()

            if not debts:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–ª–≥–æ–≤.")
                return

            response = "üìù –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
            for debt in debts:
                subject, debt_type, last_date = debt
                response += (
                    f"üìå <b>{subject}</b>\n"
                    f"üî¥ –¢–∏–ø –¥–æ–ª–≥–∞: {debt_type}\n"
                    f"üìÖ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {last_date}\n\n"
                )

            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error fetching debts: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤.")




@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb.schedule_menu)

@router.message(F.text == "üë• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
async def send_group_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–≥—Ä—É–ø–ø.xlsx"
    if os.path.exists(file_path):
        with open(file_path, 'rb') as file:
            await message.answer_document(types.BufferedInputFile(file.read(), filename=file_path), 
                                        reply_markup=kb.schedule_menu)
    else:
        await message.answer("–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.schedule_menu)

@router.message(F.text == "üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def send_teacher_schedule(message: Message):
    file_path = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.xls"
    if os.path.exists(file_path):
        with open(file_path, 'rb') as file:
            await message.answer_document(types.BufferedInputFile(file.read(), filename=file_path),
                                        reply_markup=kb.schedule_menu)
    else:
        await message.answer("–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.schedule_menu)

@router.message(F.text == "‚è≥ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
async def send_debt_schedule(message: Message):
    file_path = "–ì—Ä–∞—Ñ–∏–∫_–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.xlsx"
    if os.path.exists(file_path):
        with open(file_path, 'rb') as file:
            await message.answer_document(types.BufferedInputFile(file.read(), filename=file_path),
                                        reply_markup=kb.schedule_menu)
    else:
        await message.answer("–§–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.schedule_menu)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)