import aiosqlite
import asyncio
from aiogram import Bot
import logging
from datetime import datetime, timedelta
import os
import hashlib
import time
from typing import Optional, List, Dict, Any, Tuple

logger = logging.getLogger(__name__)

class ChangeTracker:
    def __init__(self):
        self.last_check_time = datetime.now()
        self.sent_notifications = set()

async def track_changes(db_connection: aiosqlite.Connection, bot: Bot):
    tracker = ChangeTracker()
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
            await check_test_changes(db_connection, bot, tracker)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–≥–∞—Ö
            await check_debt_changes(db_connection, bot, tracker)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            tracker.last_check_time = datetime.now()
            
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            await asyncio.sleep(10)

async def check_test_changes(db_connection: aiosqlite.Connection, bot: Bot, tracker: ChangeTracker):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    async with db_connection.execute('''
        SELECT t.id, t.test_link, t.date, g.name_group, subj.name, tch.full_name, 
               CASE 
                   WHEN t.created_at > ? THEN 'created'
                   WHEN t.updated_at > ? THEN 'updated'
                   WHEN t.deleted_at > ? THEN 'deleted'
               END as change_type
        FROM tests t
        JOIN groups g ON t.group_id = g.id
        JOIN disciplines d ON t.discipline_id = d.id
        JOIN subjects subj ON d.subject_id = subj.id
        JOIN teachers tch ON d.teacher_id = tch.id
        WHERE t.created_at > ? OR t.updated_at > ? OR t.deleted_at > ?
    ''', (tracker.last_check_time,) * 6) as cursor:
        changes = await cursor.fetchall()
    
    for test_id, test_link, test_date, group_name, subject_name, teacher_name, change_type in changes:
        if (test_id, change_type) in tracker.sent_notifications:
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
        async with db_connection.execute('''
            SELECT telegram_id FROM students 
            WHERE id_group = (SELECT id FROM groups WHERE name_group = ?)
            AND telegram_id IS NOT NULL
            AND is_active = 1
        ''', (group_name,)) as cursor:
            students = await cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if change_type == 'created':
            message = (f"üìå <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç!</b>\n\n"
                      f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                      f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n"
                      f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
                      f"üìÖ –î–∞—Ç–∞: {test_date}\n"
                      f"üîó –°—Å—ã–ª–∫–∞: <a href='{test_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É</a>")
        elif change_type == 'updated':
            message = (f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω —Ç–µ—Å—Ç!</b>\n\n"
                      f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                      f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n"
                      f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
                      f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {test_date}\n"
                      f"üîó –°—Å—ã–ª–∫–∞: <a href='{test_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É</a>")
        elif change_type == 'deleted':
            message = (f"‚ùå <b>–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω!</b>\n\n"
                      f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                      f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n"
                      f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
                      f"üìÖ –î–∞—Ç–∞: {test_date}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (telegram_id,) in students:
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text=message,
                    parse_mode='HTML'
                )
                tracker.sent_notifications.add((test_id, change_type))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Å—Ç–µ: {e}")

async def check_debt_changes(db_connection: aiosqlite.Connection, bot: Bot, tracker: ChangeTracker):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    async with db_connection.execute('''
        SELECT sd.student_id, sd.discipline_id, sd.debt_type_id, 
               subj.name, dt.name, sd.last_date,
               CASE 
                   WHEN sd.created_at > ? THEN 'created'
                   WHEN sd.updated_at > ? THEN 'updated'
                   WHEN sd.deleted_at > ? THEN 'deleted'
               END as change_type
        FROM student_debts sd
        JOIN disciplines d ON sd.discipline_id = d.id
        JOIN subjects subj ON d.subject_id = subj.id
        JOIN debt_types dt ON sd.debt_type_id = dt.id
        WHERE sd.created_at > ? OR sd.updated_at > ? OR sd.deleted_at > ?
    ''', (tracker.last_check_time,) * 6) as cursor:
        changes = await cursor.fetchall()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    debts_by_student: Dict[int, List[Tuple]] = {}
    for change in changes:
        student_id = change[0]
        if student_id not in debts_by_student:
            debts_by_student[student_id] = []
        debts_by_student[student_id].append(change)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for student_id, debts in debts_by_student.items():
        # –ü–æ–ª—É—á–∞–µ–º telegram_id —Å—Ç—É–¥–µ–Ω—Ç–∞
        async with db_connection.execute('''
            SELECT telegram_id FROM students 
            WHERE id_student = ? AND is_active = 1 AND telegram_id IS NOT NULL
        ''', (student_id,)) as cursor:
            student = await cursor.fetchone()
        
        if not student:
            continue
            
        telegram_id = student[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üì¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö –¥–æ–ª–≥–∞—Ö:</b>\n\n"
        for debt in debts:
            _, _, _, subject_name, debt_type, last_date, change_type = debt
            
            if change_type == 'created':
                message += (f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–ª–≥:\n"
                          f"üìö {subject_name}\n"
                          f"üî¥ {debt_type}\n"
                          f"‚è≥ –°–¥–∞—Ç—å –¥–æ: {last_date}\n\n")
            elif change_type == 'updated':
                message += (f"üîÑ –ò–∑–º–µ–Ω–µ–Ω –¥–æ–ª–≥:\n"
                          f"üìö {subject_name}\n"
                          f"üî¥ {debt_type}\n"
                          f"‚è≥ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {last_date}\n\n")
            elif change_type == 'deleted':
                message += (f"‚ùå –°–Ω—è—Ç –¥–æ–ª–≥:\n"
                          f"üìö {subject_name}\n"
                          f"üî¥ {debt_type}\n\n")
        
        try:
            await bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='HTML'
            )
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            for debt in debts:
                tracker.sent_notifications.add((student_id, debt[1], debt[2], debt[6]))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–ª–≥–µ: {e}")

class FileWatcher:
    def __init__(self):
        self.file_hashes = {}
        self.file_stats = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self.file_notification_sent = False
        
    async def get_file_info(self, file_path: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (—Ö–µ—à –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)"""
        if not os.path.exists(file_path):
            return None
            
        try:
            stat = os.stat(file_path)
            with open(file_path, 'rb') as f:
                content = f.read()
                return {
                    'hash': hashlib.sha256(content).hexdigest(),
                    'size': stat.st_size,
                    'mtime': stat.st_mtime
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
            
    async def check_file_changes(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ (–ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –∏ —Ö–µ—à—É)"""
        current_info = await self.get_file_info(file_path)
        if not current_info:
            return False
            
        if file_path not in self.file_stats:
            self.file_stats[file_path] = current_info
            self.file_hashes[file_path] = current_info['hash']
            return False
            
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º (–±—ã—Å—Ç—Ä–µ–µ)
        if (self.file_stats[file_path]['size'] != current_info['size'] or 
            self.file_stats[file_path]['mtime'] != current_info['mtime']):
            # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
            if self.file_hashes[file_path] != current_info['hash']:
                self.file_stats[file_path] = current_info
                self.file_hashes[file_path] = current_info['hash']
                self.file_notification_sent = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
                return True
                
        return False
    




async def mark_user_inactive(db_connection: aiosqlite.Connection, telegram_id: int):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
    try:
        await db_connection.execute(
            "UPDATE students SET is_active = 0 WHERE telegram_id = ?",
            (telegram_id,)
        )
        await db_connection.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ: {e}")

async def notify_users(bot: Bot):
    db_connection = None
    file_watcher = FileWatcher()
    
   # –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    BATCH_SIZE = 50  # –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    DELAY_BETWEEN_BATCHES = 0.3  # –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    DELAY_BETWEEN_MESSAGES = 0.05  # –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
    
    schedule_files = [
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–≥—Ä—É–ø–ø.xlsx",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.xls",
        "–ì—Ä–∞—Ñ–∏–∫_–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.xlsx"
    ]
    
    try:
        db_connection = await aiosqlite.connect('student_bot.db')
        while True:
            try:
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å batch-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                async with db_connection.execute('''
                    SELECT n.id, n.title, n.description, n.for_all_groups, n.date, n.place 
                    FROM news n
                    WHERE n.is_published = 1 
                    AND NOT EXISTS (
                        SELECT 1 FROM sent_notifications sn 
                        WHERE sn.notification_type = 'news' 
                        AND sn.entity_id = n.id
                    )
                    ORDER BY n.date DESC
                ''') as cursor:
                    news_list = await cursor.fetchall()

                if news_list:
                    for news_id, title, description, for_all_groups, date, place in news_list:                         
                        success_sends = 0
                        
                        if for_all_groups:
                            query = '''
                                SELECT s.telegram_id 
                                FROM students s
                                WHERE s.telegram_id IS NOT NULL
                                AND s.is_active = 1
                            '''
                            params = ()
                        else:
                            query = '''
                                SELECT s.telegram_id 
                                FROM students s
                                JOIN news_groups ng ON s.id_group = ng.group_id
                                WHERE s.telegram_id IS NOT NULL
                                AND s.is_active = 1
                                AND ng.news_id = ?
                            '''
                            params = (news_id,)
                        
                        async with db_connection.execute(query, params) as cursor:
                            recipients = await cursor.fetchall()
                        
                        message_text = f'üì¢ <b>{title}</b>\n\n'
                        if description:
                            message_text += f'{description}\n\n'
                        if place:
                            message_text += f'üìç –ú–µ—Å—Ç–æ: {place}\n'
                        message_text += f'üìÖ –î–∞—Ç–∞: {date}'
                        
                        # Batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                        for i in range(0, len(recipients), BATCH_SIZE):
                            batch = recipients[i:i+BATCH_SIZE]
                            tasks = []
                            
                            for (telegram_id,) in batch:
                                try:
                                    tasks.append(
                                        bot.send_message(
                                            chat_id=telegram_id,
                                            text=message_text,
                                            parse_mode='HTML'
                                        )
                                    )
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {telegram_id}: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞
                            try:
                                results = await asyncio.gather(*tasks, return_exceptions=True)
                                for j, result in enumerate(results):
                                    telegram_id = batch[j][0]
                                    if isinstance(result, Exception):
                                        if "chat not found" in str(result) or "bot was blocked" in str(result).lower():
                                            await mark_user_inactive(db_connection, telegram_id)
                                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
                                        else:
                                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {result}")
                                    else:
                                        await db_connection.execute(
                                            '''INSERT INTO sent_notifications 
                                            (notification_type, entity_id, user_id)
                                            VALUES ('news', ?, ?)''',
                                            (news_id, telegram_id)
                                        )
                                        success_sends += 1
                                
                                await db_connection.commit()
                                
                                await asyncio.sleep(DELAY_BETWEEN_BATCHES)
                                
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}")
                        
                        if success_sends > 0:
                            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–∑–∞ 1 –¥–µ–Ω—å –¥–æ) —Å batch-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                today = datetime.now().date()
                tomorrow = today + timedelta(days=1)
                
                async with db_connection.execute('''
                    SELECT t.id, t.test_link, t.date, g.name_group, subj.name, tch.full_name
                    FROM tests t
                    JOIN groups g ON t.group_id = g.id
                    JOIN disciplines d ON t.discipline_id = d.id
                    JOIN subjects subj ON d.subject_id = subj.id
                    JOIN teachers tch ON d.teacher_id = tch.id
                    WHERE date(t.date) = date(?)
                    AND NOT EXISTS (
                        SELECT 1 FROM sent_notifications sn 
                        WHERE sn.notification_type = 'test' 
                        AND sn.entity_id = t.id
                    )
                ''', (tomorrow.strftime("%Y-%m-%d"),)) as cursor:
                    upcoming_tests = await cursor.fetchall()
                
                if upcoming_tests:
                    for test_id, test_link, test_date, group_name, subject_name, teacher_name in upcoming_tests:
                        async with db_connection.execute('''
                            SELECT telegram_id FROM students 
                            WHERE id_group = (SELECT id FROM groups WHERE name_group = ?)
                            AND telegram_id IS NOT NULL
                            AND is_active = 1
                        ''', (group_name,)) as cursor:
                            students = await cursor.fetchall()
                        
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        message_text = (f'‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ!</b>\n\n'
                                     f'üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n'
                                     f'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n'
                                     f'üë• –ì—Ä—É–ø–ø–∞: {group_name}\n'
                                     f'üìÖ –î–∞—Ç–∞: {test_date}\n'
                                     f'üîó –°—Å—ã–ª–∫–∞: <a href="{test_link}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É</a>')
                        
                        # Batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞
                        success_sends = 0
                        for i in range(0, len(students), BATCH_SIZE):
                            batch = students[i:i+BATCH_SIZE]
                            tasks = []
                            
                            for (telegram_id,) in batch:
                                tasks.append(
                                    bot.send_message(
                                        chat_id=telegram_id,
                                        text=message_text,
                                        parse_mode='HTML'
                                    )
                                )
                            
                            try:
                                results = await asyncio.gather(*tasks, return_exceptions=True)
                                for j, result in enumerate(results):
                                    telegram_id = batch[j][0]
                                    if isinstance(result, Exception):
                                        if "chat not found" in str(result) or "bot was blocked" in str(result).lower():
                                            await mark_user_inactive(db_connection, telegram_id)
                                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
                                        else:
                                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {result}")
                                    else:
                                        await db_connection.execute(
                                            '''INSERT INTO sent_notifications 
                                            (notification_type, entity_id, user_id)
                                            VALUES ('test', ?, ?)''',
                                            (test_id, telegram_id)
                                        )
                                        success_sends += 1
                                
                                await db_connection.commit()
                                await asyncio.sleep(DELAY_BETWEEN_BATCHES)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç–µ—Å—Ç–∞—Ö: {e}")
                        
                        if success_sends > 0:
                            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ {test_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–≥–æ–≤ (–∑–∞ 3 –¥–Ω—è –¥–æ –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ä–æ–∫–∞) —Å batch-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                debt_notification_date = today + timedelta(days=3)
                
                async with db_connection.execute('''
                    SELECT s.telegram_id, subj.name, dt.name, sd.last_date
                    FROM student_debts sd
                    JOIN students s ON sd.student_id = s.id_student
                    JOIN disciplines d ON sd.discipline_id = d.id
                    JOIN subjects subj ON d.subject_id = subj.id
                    JOIN debt_types dt ON sd.debt_type_id = dt.id
                    WHERE date(sd.last_date) = date(?)
                    AND s.telegram_id IS NOT NULL
                    AND s.is_active = 1
                    AND NOT EXISTS (
                        SELECT 1 FROM sent_notifications sn 
                        WHERE sn.notification_type = 'debt' 
                        AND sn.entity_date = sd.last_date
                        AND sn.user_id = s.telegram_id
                    )
                ''', (debt_notification_date.strftime("%Y-%m-%d"),)) as cursor:
                    upcoming_debts = await cursor.fetchall()
                
                if upcoming_debts:
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ telegram_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–æ–ª–≥–∞–º–∏
                    debts_by_user = {}
                    for telegram_id, subject_name, debt_type, last_date in upcoming_debts:
                        if telegram_id not in debts_by_user:
                            debts_by_user[telegram_id] = []
                        debts_by_user[telegram_id].append((subject_name, debt_type, last_date))
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏
                    success_sends = 0
                    user_ids = list(debts_by_user.keys())
                    for i in range(0, len(user_ids), BATCH_SIZE):
                        batch = user_ids[i:i+BATCH_SIZE]
                        tasks = []
                        
                        for telegram_id in batch:
                            debts = debts_by_user[telegram_id]
                            message_text = '‚ÄºÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–¥—Ö–æ–¥–∏—Ç —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –¥–æ–ª–≥–æ–≤!</b>\n\n'
                            for subject, debt, date in debts:
                                message_text += (f'üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n'
                                              f'üî¥ –¢–∏–ø –¥–æ–ª–≥–∞: {debt}\n'
                                              f'‚è≥ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {date}\n\n')
                            message_text += '–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å –¥–æ–ª–≥–∏ –≤–æ–≤—Ä–µ–º—è!'
                            
                            tasks.append(
                                bot.send_message(
                                    chat_id=telegram_id,
                                    text=message_text,
                                    parse_mode='HTML'
                                )
                            )
                        
                        try:
                            results = await asyncio.gather(*tasks, return_exceptions=True)
                            for j, result in enumerate(results):
                                telegram_id = batch[j]
                                if isinstance(result, Exception):
                                    if "chat not found" in str(result) or "bot was blocked" in str(result).lower():
                                        await mark_user_inactive(db_connection, telegram_id)
                                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
                                    else:
                                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {result}")
                                else:
                                    for _, _, last_date in debts_by_user[telegram_id]:
                                        await db_connection.execute(
                                            '''INSERT INTO sent_notifications 
                                            (notification_type, entity_date, user_id)
                                            VALUES ('debt', ?, ?)''',
                                            (last_date, telegram_id)
                                        )
                                    success_sends += 1
                            
                            await db_connection.commit()
                            await asyncio.sleep(DELAY_BETWEEN_BATCHES)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–ª–≥–∞—Ö: {e}")
                    
                    if success_sends > 0:
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–ª–≥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å batch-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                for file_path in schedule_files:
                    if await file_watcher.check_file_changes(file_path) and not file_watcher.file_notification_sent:
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ {file_path}")
                        
                        if "–≥—Ä—É–ø–ø" in file_path:
                            schedule_type = "–≥—Ä—É–ø–ø"
                            emoji = "üë•"
                        elif "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π" in file_path:
                            schedule_type = "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
                            emoji = "üë®‚Äçüè´"
                        else:
                            schedule_type = "–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π"
                            emoji = "‚è≥"
                        
                        async with db_connection.execute('''
                            SELECT telegram_id FROM students 
                            WHERE telegram_id IS NOT NULL
                            AND is_active = 1
                        ''') as cursor:
                            users = await cursor.fetchall()
                        
                        message_text = (f'{emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule_type}!</b>\n\n'
                                     f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ.')
                        
                        # Batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞
                        success_sends = 0
                        for i in range(0, len(users), BATCH_SIZE):
                            batch = users[i:i+BATCH_SIZE]
                            tasks = []
                            
                            for (telegram_id,) in batch:
                                tasks.append(
                                    bot.send_message(
                                        chat_id=telegram_id,
                                        text=message_text,
                                        parse_mode='HTML'
                                    )
                                )
                            
                            try:
                                results = await asyncio.gather(*tasks, return_exceptions=True)
                                for j, result in enumerate(results):
                                    telegram_id = batch[j][0]
                                    if isinstance(result, Exception):
                                        if "chat not found" in str(result) or "bot was blocked" in str(result).lower():
                                            await mark_user_inactive(db_connection, telegram_id)
                                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
                                        else:
                                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {result}")
                                    else:
                                        success_sends += 1
                                
                                await db_connection.commit()
                                await asyncio.sleep(DELAY_BETWEEN_BATCHES)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
                        
                        if success_sends > 0:
                            file_watcher.file_notification_sent = True
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                await asyncio.sleep(10)
                
    except asyncio.CancelledError:
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    finally:
        if db_connection:
            await db_connection.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")