import aiosqlite
import asyncio
from aiogram import Bot
import logging
from app.state import BotState
from datetime import datetime

logger = logging.getLogger(__name__)

async def notify_users(bot: Bot):
    sent_news = set()
    db_connection = None
    
    try:
        db_connection = await aiosqlite.connect('student_bot.db')
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
                async with db_connection.execute('''
                    SELECT id, title, description, for_all_groups 
                    FROM news 
                    WHERE is_published = 1 
                    AND id NOT IN (SELECT news_id FROM sent_notifications)
                    ORDER BY date DESC
                ''') as cursor:
                    news_list = await cursor.fetchall()

                if news_list:
                    for news_id, title, description, for_all_groups in news_list:
                        if news_id in sent_news:
                            continue
                            
                        success_sends = 0
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø)
                        if for_all_groups:
                            # –î–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            query = '''
                                SELECT s.telegram_id 
                                FROM students s
                                WHERE s.telegram_id IS NOT NULL
                                AND s.is_active = 1
                            '''
                            params = ()
                        else:
                            # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
                            query = '''
                                SELECT s.telegram_id 
                                FROM students s
                                JOIN news_groups ng ON s.id_group = ng.group_id
                                WHERE s.telegram_id IS NOT NULL
                                AND s.is_active = 1
                                AND ng.news_id = ?
                            '''
                            params = (news_id,)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                        async with db_connection.execute(query, params) as cursor:
                            recipients = await cursor.fetchall()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        for (telegram_id,) in recipients:
                            try:
                                await bot.send_message(
                                    chat_id=telegram_id,
                                    text=f'üì¢ {title}\n\n{description}'
                                )
                                success_sends += 1
                                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                                await db_connection.execute(
                                    'INSERT INTO sent_notifications (news_id, user_id) VALUES (?, ?)',
                                    (news_id, telegram_id)
                                )
                                
                            except Exception as e:
                                if "chat not found" in str(e):
                                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                                    await db_connection.execute(
                                        'UPDATE students SET is_active = 0 WHERE telegram_id = ?',
                                        (telegram_id,)
                                    )
                                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {e}")
                        
                        await db_connection.commit()
                        if success_sends > 0:
                            sent_news.add(news_id)
                            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º (–∑–∞ 1 –¥–µ–Ω—å –¥–æ)
                today = datetime.now().strftime("%Y-%m-%d")
                async with db_connection.execute('''
                    SELECT t.id, t.test_link, t.date, g.name_group, s.name 
                    FROM tests t
                    JOIN groups g ON t.group_id = g.id
                    JOIN subjects s ON t.subject_id = s.id
                    WHERE date(t.date, '-1 day') = date(?)
                ''', (today,)) as cursor:
                    upcoming_tests = await cursor.fetchall()
                
                if upcoming_tests:
                    for test_id, test_link, test_date, group_name, subject_name in upcoming_tests:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                        async with db_connection.execute('''
                            SELECT telegram_id FROM students 
                            WHERE id_group = (SELECT id FROM groups WHERE name_group = ?)
                            AND telegram_id IS NOT NULL
                            AND is_active = 1
                        ''', (group_name,)) as cursor:
                            students = await cursor.fetchall()
                        
                        for (telegram_id,) in students:
                            try:
                                await bot.send_message(
                                    chat_id=telegram_id,
                                    text=f'‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ!\n\n'
                                         f'–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n'
                                         f'–ì—Ä—É–ø–ø–∞: {group_name}\n'
                                         f'–î–∞—Ç–∞: {test_date}\n'
                                         f'–°—Å—ã–ª–∫–∞: {test_link}'
                                )
                                await asyncio.sleep(0.5)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–µ—Å—Ç–µ {telegram_id}: {e}")
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                await asyncio.sleep(60)
                
    except asyncio.CancelledError:
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    finally:
        if BotState.notification_task:
            BotState.notification_task = None
        if db_connection:
            await db_connection.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")